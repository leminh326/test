
BLE test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c40  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000004  08006fcc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000002c  08006ff4  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000040  200000c8  0800708d  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000108  080070cd  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000094  2000011c  080070de  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001ac  200001b0  08007172  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000035c  08007172  0002035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002e47c  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00005715  00000000  00000000  0004e65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002190  00000000  00000000  00053d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001f18  00000000  00000000  00055f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0002a4f6  00000000  00000000  00057e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0001cb1b  00000000  00000000  00082316  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000ed36e  00000000  00000000  0009ee31  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0018c19f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008960  00000000  00000000  0018c21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006d64 	.word	0x08006d64

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	08006d64 	.word	0x08006d64

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fc09 	bl	80059c0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 ff10 	bl	8004fd6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08006d7c 	.word	0x08006d7c

080001c4 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fcc2 	bl	8000bac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f812 	bl	8000250 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	2000031c 	.word	0x2000031c

08000234 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000240:	f006 fb0a 	bl	8006858 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800024a:	bf00      	nop
}
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000256:	f005 fa17 	bl	8005688 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <appe_Tl_Init+0x50>)
 800025c:	2100      	movs	r1, #0
 800025e:	2008      	movs	r0, #8
 8000260:	f006 fc1a 	bl	8006a98 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <appe_Tl_Init+0x54>)
 8000266:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x58>)
 800026a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <appe_Tl_Init+0x5c>)
 8000272:	f005 f899 	bl	80053a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <appe_Tl_Init+0x60>)
 8000278:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x64>)
 800027c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x68>)
 8000280:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000282:	f240 533c 	movw	r3, #1340	; 0x53c
 8000286:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	4618      	mov	r0, r3
 800028e:	f005 fb0d 	bl	80058ac <TL_MM_Init>

  TL_Enable();
 8000292:	f005 f9f3 	bl	800567c <TL_Enable>

  return;
 8000296:	bf00      	nop
}
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	080053e1 	.word	0x080053e1
 80002a4:	20030724 	.word	0x20030724
 80002a8:	080002bd 	.word	0x080002bd
 80002ac:	080002d3 	.word	0x080002d3
 80002b0:	2003093c 	.word	0x2003093c
 80002b4:	20030830 	.word	0x20030830
 80002b8:	200301e8 	.word	0x200301e8

080002bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002c6:	bf00      	nop
}
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002da:	f7ff ff57 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002de:	f005 fca5 	bl	8005c2c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f006 fac9 	bl	800687c <UTIL_LPM_SetOffMode>
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80002f6:	bf00      	nop
}
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800030a:	f04f 30ff 	mov.w	r0, #4294967295
 800030e:	f006 fae3 	bl	80068d8 <UTIL_SEQ_Run>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000322:	2100      	movs	r1, #0
 8000324:	2008      	movs	r0, #8
 8000326:	f006 fbd7 	bl	8006ad8 <UTIL_SEQ_SetTask>
  return;
 800032a:	bf00      	nop
}
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800033a:	2002      	movs	r0, #2
 800033c:	f006 fc32 	bl	8006ba4 <UTIL_SEQ_SetEvt>
  return;
 8000340:	bf00      	nop
}
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000350:	2002      	movs	r0, #2
 8000352:	f006 fc45 	bl	8006be0 <UTIL_SEQ_WaitEvt>
  return;
 8000356:	bf00      	nop
}
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 800036a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4313      	orrs	r3, r2
 8000374:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	58000800 	.word	0x58000800

08000388 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]

}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	58000800 	.word	0x58000800

080003ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003be:	b29b      	uxth	r3, r3
 80003c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003c2:	e005      	b.n	80003d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d1f5      	bne.n	80003c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003d8:	683b      	ldr	r3, [r7, #0]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40002800 	.word	0x40002800

080003ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80003fc:	79ba      	ldrb	r2, [r7, #6]
 80003fe:	491d      	ldr	r1, [pc, #116]	; (8000474 <LinkTimerAfter+0x88>)
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	440b      	add	r3, r1
 800040a:	3315      	adds	r3, #21
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b06      	cmp	r3, #6
 8000414:	d009      	beq.n	800042a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000416:	7bfa      	ldrb	r2, [r7, #15]
 8000418:	4916      	ldr	r1, [pc, #88]	; (8000474 <LinkTimerAfter+0x88>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	440b      	add	r3, r1
 8000424:	3314      	adds	r3, #20
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <LinkTimerAfter+0x88>)
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	3315      	adds	r3, #21
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <LinkTimerAfter+0x88>)
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	440b      	add	r3, r1
 800044c:	3314      	adds	r3, #20
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <LinkTimerAfter+0x88>)
 8000456:	4613      	mov	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4413      	add	r3, r2
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	440b      	add	r3, r1
 8000460:	3315      	adds	r3, #21
 8000462:	79fa      	ldrb	r2, [r7, #7]
 8000464:	701a      	strb	r2, [r3, #0]

  return;
 8000466:	bf00      	nop
}
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	2000002c 	.word	0x2000002c

08000478 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <LinkTimerBefore+0xb8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	429a      	cmp	r2, r3
 8000492:	d032      	beq.n	80004fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	4927      	ldr	r1, [pc, #156]	; (8000534 <LinkTimerBefore+0xbc>)
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	440b      	add	r3, r1
 80004a2:	3314      	adds	r3, #20
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004a8:	7bfa      	ldrb	r2, [r7, #15]
 80004aa:	4922      	ldr	r1, [pc, #136]	; (8000534 <LinkTimerBefore+0xbc>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	440b      	add	r3, r1
 80004b6:	3315      	adds	r3, #21
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	491d      	ldr	r1, [pc, #116]	; (8000534 <LinkTimerBefore+0xbc>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	3315      	adds	r3, #21
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4918      	ldr	r1, [pc, #96]	; (8000534 <LinkTimerBefore+0xbc>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	440b      	add	r3, r1
 80004de:	3314      	adds	r3, #20
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	4913      	ldr	r1, [pc, #76]	; (8000534 <LinkTimerBefore+0xbc>)
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	440b      	add	r3, r1
 80004f2:	3314      	adds	r3, #20
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80004f8:	e014      	b.n	8000524 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	490d      	ldr	r1, [pc, #52]	; (8000534 <LinkTimerBefore+0xbc>)
 80004fe:	4613      	mov	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4413      	add	r3, r2
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	440b      	add	r3, r1
 8000508:	3315      	adds	r3, #21
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	4908      	ldr	r1, [pc, #32]	; (8000534 <LinkTimerBefore+0xbc>)
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	440b      	add	r3, r1
 800051c:	3314      	adds	r3, #20
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	701a      	strb	r2, [r3, #0]
  return;
 8000522:	bf00      	nop
}
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000bc 	.word	0x200000bc
 8000534:	2000002c 	.word	0x2000002c

08000538 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <linkTimer+0x144>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b06      	cmp	r3, #6
 800054a:	d118      	bne.n	800057e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800054c:	4b4b      	ldr	r3, [pc, #300]	; (800067c <linkTimer+0x144>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <linkTimer+0x148>)
 8000554:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <linkTimer+0x144>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	4949      	ldr	r1, [pc, #292]	; (8000684 <linkTimer+0x14c>)
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	440b      	add	r3, r1
 800056a:	3315      	adds	r3, #21
 800056c:	2206      	movs	r2, #6
 800056e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <linkTimer+0x150>)
 8000572:	f04f 32ff 	mov.w	r2, #4294967295
 8000576:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	81fb      	strh	r3, [r7, #14]
 800057c:	e078      	b.n	8000670 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800057e:	f000 f909 	bl	8000794 <ReturnTimeElapsed>
 8000582:	4603      	mov	r3, r0
 8000584:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000586:	79fa      	ldrb	r2, [r7, #7]
 8000588:	493e      	ldr	r1, [pc, #248]	; (8000684 <linkTimer+0x14c>)
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	3308      	adds	r3, #8
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	4419      	add	r1, r3
 800059e:	4839      	ldr	r0, [pc, #228]	; (8000684 <linkTimer+0x14c>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	4403      	add	r3, r0
 80005aa:	3308      	adds	r3, #8
 80005ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4934      	ldr	r1, [pc, #208]	; (8000684 <linkTimer+0x14c>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	440b      	add	r3, r1
 80005bc:	3308      	adds	r3, #8
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <linkTimer+0x144>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <linkTimer+0x14c>)
 80005cc:	460b      	mov	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	440b      	add	r3, r1
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	3308      	adds	r3, #8
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d337      	bcc.n	8000650 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <linkTimer+0x144>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	4926      	ldr	r1, [pc, #152]	; (8000684 <linkTimer+0x14c>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	3315      	adds	r3, #21
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80005fa:	e013      	b.n	8000624 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80005fc:	7b7a      	ldrb	r2, [r7, #13]
 80005fe:	4921      	ldr	r1, [pc, #132]	; (8000684 <linkTimer+0x14c>)
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	440b      	add	r3, r1
 800060a:	3315      	adds	r3, #21
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000610:	7b7a      	ldrb	r2, [r7, #13]
 8000612:	491c      	ldr	r1, [pc, #112]	; (8000684 <linkTimer+0x14c>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	440b      	add	r3, r1
 800061e:	3315      	adds	r3, #21
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	2b06      	cmp	r3, #6
 8000628:	d00b      	beq.n	8000642 <linkTimer+0x10a>
 800062a:	7b3a      	ldrb	r2, [r7, #12]
 800062c:	4915      	ldr	r1, [pc, #84]	; (8000684 <linkTimer+0x14c>)
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	3308      	adds	r3, #8
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	429a      	cmp	r2, r3
 8000640:	d2dc      	bcs.n	80005fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000642:	7b7a      	ldrb	r2, [r7, #13]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fecf 	bl	80003ec <LinkTimerAfter>
 800064e:	e00f      	b.n	8000670 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <linkTimer+0x144>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff0c 	bl	8000478 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <linkTimer+0x144>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <linkTimer+0x148>)
 8000668:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <linkTimer+0x144>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000670:	89fb      	ldrh	r3, [r7, #14]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000bc 	.word	0x200000bc
 8000680:	200000bd 	.word	0x200000bd
 8000684:	2000002c 	.word	0x2000002c
 8000688:	200000c0 	.word	0x200000c0

0800068c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <UnlinkTimer+0xf8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d111      	bne.n	80006cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <UnlinkTimer+0xf8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <UnlinkTimer+0xfc>)
 80006b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	4935      	ldr	r1, [pc, #212]	; (800078c <UnlinkTimer+0x100>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	3315      	adds	r3, #21
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <UnlinkTimer+0xf8>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e03e      	b.n	800074a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	492f      	ldr	r1, [pc, #188]	; (800078c <UnlinkTimer+0x100>)
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	3314      	adds	r3, #20
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	492a      	ldr	r1, [pc, #168]	; (800078c <UnlinkTimer+0x100>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	440b      	add	r3, r1
 80006ee:	3315      	adds	r3, #21
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006f4:	79f9      	ldrb	r1, [r7, #7]
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	4824      	ldr	r0, [pc, #144]	; (800078c <UnlinkTimer+0x100>)
 80006fa:	460b      	mov	r3, r1
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	440b      	add	r3, r1
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4403      	add	r3, r0
 8000704:	3315      	adds	r3, #21
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	4920      	ldr	r1, [pc, #128]	; (800078c <UnlinkTimer+0x100>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3315      	adds	r3, #21
 8000718:	4602      	mov	r2, r0
 800071a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	2b06      	cmp	r3, #6
 8000720:	d013      	beq.n	800074a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000722:	79f9      	ldrb	r1, [r7, #7]
 8000724:	7bba      	ldrb	r2, [r7, #14]
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <UnlinkTimer+0x100>)
 8000728:	460b      	mov	r3, r1
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	440b      	add	r3, r1
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4403      	add	r3, r0
 8000732:	3314      	adds	r3, #20
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	4914      	ldr	r1, [pc, #80]	; (800078c <UnlinkTimer+0x100>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3314      	adds	r3, #20
 8000746:	4602      	mov	r2, r0
 8000748:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	490f      	ldr	r1, [pc, #60]	; (800078c <UnlinkTimer+0x100>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	330c      	adds	r3, #12
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <UnlinkTimer+0xf8>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b06      	cmp	r3, #6
 8000766:	d107      	bne.n	8000778 <UnlinkTimer+0xec>
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <UnlinkTimer+0x104>)
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	601a      	str	r2, [r3, #0]
  }

  return;
 8000776:	bf00      	nop
 8000778:	bf00      	nop
}
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	200000bc 	.word	0x200000bc
 8000788:	200000bd 	.word	0x200000bd
 800078c:	2000002c 	.word	0x2000002c
 8000790:	200000c0 	.word	0x200000c0

08000794 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <ReturnTimeElapsed+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a2:	d026      	beq.n	80007f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007a4:	f7ff fe02 	bl	80003ac <ReadRtcSsrValue>
 80007a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d805      	bhi.n	80007c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e00a      	b.n	80007d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <ReturnTimeElapsed+0x74>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <ReturnTimeElapsed+0x78>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <ReturnTimeElapsed+0x7c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	40d3      	lsrs	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	e001      	b.n	80007f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	b29b      	uxth	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000c0 	.word	0x200000c0
 8000808:	200001d2 	.word	0x200001d2
 800080c:	200001d1 	.word	0x200001d1
 8000810:	200001d0 	.word	0x200001d0

08000814 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000824:	f7ff fdc2 	bl	80003ac <ReadRtcSsrValue>
 8000828:	4602      	mov	r2, r0
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <RestartWakeupCounter+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800082e:	2003      	movs	r0, #3
 8000830:	f001 fac3 	bl	8001dba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000834:	e03e      	b.n	80008b4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d803      	bhi.n	8000844 <RestartWakeupCounter+0x30>
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <RestartWakeupCounter+0xac>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d002      	beq.n	800084a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	3b01      	subs	r3, #1
 8000848:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800084a:	bf00      	nop
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f7      	beq.n	800084c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <RestartWakeupCounter+0xb0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000870:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <RestartWakeupCounter+0xb4>)
 8000874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000878:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800087a:	2003      	movs	r0, #3
 800087c:	f001 faab 	bl	8001dd6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <RestartWakeupCounter+0xb8>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	4910      	ldr	r1, [pc, #64]	; (80008cc <RestartWakeupCounter+0xb8>)
 800088c:	4313      	orrs	r3, r2
 800088e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000890:	f7ff fd8c 	bl	80003ac <ReadRtcSsrValue>
 8000894:	4602      	mov	r2, r0
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <RestartWakeupCounter+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <RestartWakeupCounter+0xb0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ac:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008ae:	f3af 8000 	nop.w
  return ;
 80008b2:	bf00      	nop
}
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000c0 	.word	0x200000c0
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	58000800 	.word	0x58000800
 80008cc:	40002800 	.word	0x40002800

080008d0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <RescheduleTimerList+0x124>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e2:	d108      	bne.n	80008f6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008e4:	bf00      	nop
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <RescheduleTimerList+0x128>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f7      	bne.n	80008e6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <RescheduleTimerList+0x128>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <RescheduleTimerList+0x128>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000908:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <RescheduleTimerList+0x12c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	493b      	ldr	r1, [pc, #236]	; (8000a00 <RescheduleTimerList+0x130>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3308      	adds	r3, #8
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000924:	f7ff ff36 	bl	8000794 <ReturnTimeElapsed>
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d205      	bcs.n	8000940 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <RescheduleTimerList+0x134>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e04d      	b.n	80009dc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <RescheduleTimerList+0x138>)
 8000944:	8812      	ldrh	r2, [r2, #0]
 8000946:	b292      	uxth	r2, r2
 8000948:	4413      	add	r3, r2
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4293      	cmp	r3, r2
 8000950:	d906      	bls.n	8000960 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <RescheduleTimerList+0x138>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <RescheduleTimerList+0x134>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e03d      	b.n	80009dc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	b29a      	uxth	r2, r3
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <RescheduleTimerList+0x134>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000970:	e034      	b.n	80009dc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4922      	ldr	r1, [pc, #136]	; (8000a00 <RescheduleTimerList+0x130>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3308      	adds	r3, #8
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d20a      	bcs.n	80009a0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	491c      	ldr	r1, [pc, #112]	; (8000a00 <RescheduleTimerList+0x130>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e013      	b.n	80009c8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	4917      	ldr	r1, [pc, #92]	; (8000a00 <RescheduleTimerList+0x130>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3308      	adds	r3, #8
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <RescheduleTimerList+0x130>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4403      	add	r3, r0
 80009c4:	3308      	adds	r3, #8
 80009c6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <RescheduleTimerList+0x130>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	440b      	add	r3, r1
 80009d6:	3315      	adds	r3, #21
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d1c7      	bne.n	8000972 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff15 	bl	8000814 <RestartWakeupCounter>

  return ;
 80009ea:	bf00      	nop
}
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40002800 	.word	0x40002800
 80009f8:	200001cc 	.word	0x200001cc
 80009fc:	200000bc 	.word	0x200000bc
 8000a00:	2000002c 	.word	0x2000002c
 8000a04:	200000c4 	.word	0x200000c4
 8000a08:	200001d4 	.word	0x200001d4

08000a0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a12:	f3ef 8310 	mrs	r3, PRIMASK
 8000a16:	617b      	str	r3, [r7, #20]
  return(result);
 8000a18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	22ca      	movs	r2, #202	; 0xca
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
 8000a28:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000a32:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a44:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000a46:	4b55      	ldr	r3, [pc, #340]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000a4e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a52:	4953      	ldr	r1, [pc, #332]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	330c      	adds	r3, #12
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d170      	bne.n	8000b4a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000a68:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a6c:	494c      	ldr	r1, [pc, #304]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	440b      	add	r3, r1
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000a7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a80:	4947      	ldr	r1, [pc, #284]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d04e      	beq.n	8000b3a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000a9c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aa0:	493f      	ldr	r1, [pc, #252]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	330d      	adds	r3, #13
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d125      	bne.n	8000b02 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fde5 	bl	800068c <UnlinkTimer>
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000acc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ad0:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	3304      	adds	r3, #4
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f9ca 	bl	8000e80 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	22ca      	movs	r2, #202	; 0xca
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2253      	movs	r2, #83	; 0x53
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
 8000b00:	e013      	b.n	8000b2a <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f92b 	bl	8000d6c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	22ca      	movs	r2, #202	; 0xca
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2253      	movs	r2, #83	; 0x53
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4619      	mov	r1, r3
 8000b32:	69b8      	ldr	r0, [r7, #24]
 8000b34:	f000 fa2a 	bl	8000f8c <HW_TS_RTC_Int_AppNot>
 8000b38:	e024      	b.n	8000b84 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000b3a:	f7ff fec9 	bl	80008d0 <RescheduleTimerList>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f383 8810 	msr	PRIMASK, r3
 8000b48:	e01c      	b.n	8000b84 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b4a:	bf00      	nop
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f7      	beq.n	8000b4c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000b8e:	bf00      	nop
}
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001cc 	.word	0x200001cc
 8000b9c:	200000bc 	.word	0x200000bc
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	200000c4 	.word	0x200000c4
 8000ba8:	58000800 	.word	0x58000800

08000bac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000bb8:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <HW_TS_Init+0x194>)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bbe:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <HW_TS_Init+0x194>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	22ca      	movs	r2, #202	; 0xca
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <HW_TS_Init+0x194>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2253      	movs	r2, #83	; 0x53
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <HW_TS_Init+0x198>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	4a5b      	ldr	r2, [pc, #364]	; (8000d44 <HW_TS_Init+0x198>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HW_TS_Init+0x198>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f1c3 0304 	rsb	r3, r3, #4
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b55      	ldr	r3, [pc, #340]	; (8000d48 <HW_TS_Init+0x19c>)
 8000bf2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000bf4:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <HW_TS_Init+0x198>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000bfc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c00:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	fa92 f2a2 	rbit	r2, r2
 8000c08:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HW_TS_Init+0x1a0>)
 8000c1c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c1e:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <HW_TS_Init+0x198>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <HW_TS_Init+0x1a4>)
 8000c30:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HW_TS_Init+0x1a4>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <HW_TS_Init+0x1a0>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c44:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HW_TS_Init+0x19c>)
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	40d3      	lsrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d904      	bls.n	8000c60 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <HW_TS_Init+0x1a8>)
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	e003      	b.n	8000c68 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <HW_TS_Init+0x1a8>)
 8000c66:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c6c:	f7ff fb8c 	bl	8000388 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c74:	f7ff fb74 	bl	8000360 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d143      	bne.n	8000d06 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HW_TS_Init+0x1ac>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HW_TS_Init+0x1b0>)
 8000c86:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	75fb      	strb	r3, [r7, #23]
 8000c90:	e00c      	b.n	8000cac <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000c92:	7dfa      	ldrb	r2, [r7, #23]
 8000c94:	4932      	ldr	r1, [pc, #200]	; (8000d60 <HW_TS_Init+0x1b4>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d9ef      	bls.n	8000c92 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <HW_TS_Init+0x1b8>)
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HW_TS_Init+0x194>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HW_TS_Init+0x194>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HW_TS_Init+0x194>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HW_TS_Init+0x194>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ce0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HW_TS_Init+0x1bc>)
 8000ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000cea:	2003      	movs	r0, #3
 8000cec:	f001 f873 	bl	8001dd6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HW_TS_Init+0x194>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HW_TS_Init+0x194>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	e00a      	b.n	8000d1c <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HW_TS_Init+0x194>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f001 f84f 	bl	8001dba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HW_TS_Init+0x194>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d26:	2200      	movs	r2, #0
 8000d28:	2103      	movs	r1, #3
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f001 f803 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d30:	2003      	movs	r0, #3
 8000d32:	f001 f81a 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  return;
 8000d36:	bf00      	nop
}
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001cc 	.word	0x200001cc
 8000d44:	40002800 	.word	0x40002800
 8000d48:	200001d0 	.word	0x200001d0
 8000d4c:	200001d1 	.word	0x200001d1
 8000d50:	200001d2 	.word	0x200001d2
 8000d54:	200001d4 	.word	0x200001d4
 8000d58:	200000c4 	.word	0x200000c4
 8000d5c:	200000c0 	.word	0x200000c0
 8000d60:	2000002c 	.word	0x2000002c
 8000d64:	200000bc 	.word	0x200000bc
 8000d68:	58000800 	.word	0x58000800

08000d6c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d76:	f3ef 8310 	mrs	r3, PRIMASK
 8000d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 ffff 	bl	8001d86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	22ca      	movs	r2, #202	; 0xca
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2253      	movs	r2, #83	; 0x53
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	4933      	ldr	r1, [pc, #204]	; (8000e6c <HW_TS_Stop+0x100>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	330c      	adds	r3, #12
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d148      	bne.n	8000e46 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fc67 	bl	800068c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HW_TS_Stop+0x104>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d135      	bne.n	8000e36 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HW_TS_Stop+0x108>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd6:	d108      	bne.n	8000dea <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000dd8:	bf00      	nop
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f7      	bne.n	8000dda <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dfc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000dfe:	bf00      	nop
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f7      	beq.n	8000e00 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e24:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HW_TS_Stop+0x10c>)
 8000e28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e2c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 ffd1 	bl	8001dd6 <HAL_NVIC_ClearPendingIRQ>
 8000e34:	e007      	b.n	8000e46 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HW_TS_Stop+0x110>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	7cfa      	ldrb	r2, [r7, #19]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d001      	beq.n	8000e46 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000e42:	f7ff fd45 	bl	80008d0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HW_TS_Stop+0xfc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	22ff      	movs	r2, #255	; 0xff
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 ff8a 	bl	8001d6a <HAL_NVIC_EnableIRQ>
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000e60:	bf00      	nop
}
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001cc 	.word	0x200001cc
 8000e6c:	2000002c 	.word	0x2000002c
 8000e70:	200000bc 	.word	0x200000bc
 8000e74:	40002800 	.word	0x40002800
 8000e78:	58000800 	.word	0x58000800
 8000e7c:	200000bd 	.word	0x200000bd

08000e80 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	493b      	ldr	r1, [pc, #236]	; (8000f7c <HW_TS_Start+0xfc>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	330c      	adds	r3, #12
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d103      	bne.n	8000eac <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff60 	bl	8000d6c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000eac:	f3ef 8310 	mrs	r3, PRIMASK
 8000eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 ff64 	bl	8001d86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HW_TS_Start+0x100>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	22ca      	movs	r2, #202	; 0xca
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HW_TS_Start+0x100>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2253      	movs	r2, #83	; 0x53
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	4929      	ldr	r1, [pc, #164]	; (8000f7c <HW_TS_Start+0xfc>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	440b      	add	r3, r1
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	4924      	ldr	r1, [pc, #144]	; (8000f7c <HW_TS_Start+0xfc>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <HW_TS_Start+0xfc>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	3304      	adds	r3, #4
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fb11 	bl	8000538 <linkTimer>
 8000f16:	4603      	mov	r3, r0
 8000f18:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HW_TS_Start+0x104>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HW_TS_Start+0x108>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	7c7a      	ldrb	r2, [r7, #17]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d002      	beq.n	8000f32 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8000f2c:	f7ff fcd0 	bl	80008d0 <RescheduleTimerList>
 8000f30:	e013      	b.n	8000f5a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <HW_TS_Start+0xfc>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	8a7b      	ldrh	r3, [r7, #18]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	1ac9      	subs	r1, r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <HW_TS_Start+0xfc>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HW_TS_Start+0x100>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	22ff      	movs	r2, #255	; 0xff
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 ff00 	bl	8001d6a <HAL_NVIC_EnableIRQ>
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000f74:	bf00      	nop
}
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000002c 	.word	0x2000002c
 8000f80:	200001cc 	.word	0x200001cc
 8000f84:	200000bc 	.word	0x200000bc
 8000f88:	200000bd 	.word	0x200000bd

08000f8c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	460b      	mov	r3, r1
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4798      	blx	r3

  return;
 8000f9e:	bf00      	nop
}
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <LL_EXTI_DisableIT_0_31>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <LL_EXTI_DisableIT_0_31+0x28>)
 8000fb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4905      	ldr	r1, [pc, #20]	; (8000fd0 <LL_EXTI_DisableIT_0_31+0x28>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	58000800 	.word	0x58000800

08000fd4 <LL_EXTI_DisableIT_32_63>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <LL_EXTI_DisableIT_32_63+0x28>)
 8000fde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4905      	ldr	r1, [pc, #20]	; (8000ffc <LL_EXTI_DisableIT_32_63+0x28>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	58000800 	.word	0x58000800

08001000 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800100e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800101a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001026:	4313      	orrs	r3, r2
 8001028:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	cafecafe 	.word	0xcafecafe

0800103c <LL_RCC_LSE_SetDriveCapability>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104c:	f023 0218 	bic.w	r2, r3, #24
 8001050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010c0:	d101      	bne.n	80010c6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e6:	d101      	bne.n	80010ec <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	605a      	str	r2, [r3, #4]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	605a      	str	r2, [r3, #4]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	619a      	str	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f000 fbc8 	bl	80019b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device(); // if CFG_HW_RESET_BY_FW : Reset_BackupDomain, Reset_IPCC inter-processor communication controller
 8001228:	f000 f928 	bl	800147c <Reset_Device>
  Config_HSE();   // HSE_Tuning, One-Time programmable (OTP)
 800122c:	f000 f910 	bl	8001450 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f816 	bl	8001260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001234:	f000 f905 	bl	8001442 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001238:	f000 f961 	bl	80014fe <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 f8fa 	bl	8001434 <MX_GPIO_Init>
  MX_CRC_Init();
 8001240:	f000 f890 	bl	8001364 <MX_CRC_Init>
  MX_RF_Init();
 8001244:	f000 f8b0 	bl	80013a8 <MX_RF_Init>
  MX_RNG_Init();
 8001248:	f000 f8b6 	bl	80013b8 <MX_RNG_Init>
  MX_RTC_Init();
 800124c:	f000 f8c8 	bl	80013e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001250:	f7fe ffe2 	bl	8000218 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( (~0U) );
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f005 fb3e 	bl	80068d8 <UTIL_SEQ_Run>
  {
 800125c:	e7fa      	b.n	8001254 <main+0x34>
	...

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ae      	sub	sp, #184	; 0xb8
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126a:	2248      	movs	r2, #72	; 0x48
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fd6f 	bl	8006d52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2250      	movs	r2, #80	; 0x50
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fd5f 	bl	8006d52 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001294:	f000 febc 	bl	8002010 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fecf 	bl	800103c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <SystemClock_Config+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a6:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <SystemClock_Config+0x100>)
 80012a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <SystemClock_Config+0x100>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80012ba:	230f      	movs	r3, #15
 80012bc:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ce:	2340      	movs	r3, #64	; 0x40
 80012d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012d4:	2305      	movs	r3, #5
 80012d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fa2d 	bl	8002744 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f0:	f000 f911 	bl	8001516 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80012f4:	236f      	movs	r3, #111	; 0x6f
 80012f6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012f8:	2302      	movs	r3, #2
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001314:	2101      	movs	r1, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fda8 	bl	8002e6c <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001322:	f000 f8f8 	bl	8001516 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001326:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_RNG;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 800132c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800133e:	2302      	movs	r3, #2
 8001340:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001342:	2300      	movs	r3, #0
 8001344:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f002 f99e 	bl	800368a <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001354:	f000 f8df 	bl	8001516 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001358:	bf00      	nop
 800135a:	37b8      	adds	r7, #184	; 0xb8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58000400 	.word	0x58000400

08001364 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_CRC_Init+0x3c>)
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <MX_CRC_Init+0x40>)
 800136c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_CRC_Init+0x3c>)
 8001370:	2200      	movs	r2, #0
 8001372:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_CRC_Init+0x3c>)
 8001376:	2200      	movs	r2, #0
 8001378:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_CRC_Init+0x3c>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_CRC_Init+0x3c>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_CRC_Init+0x3c>)
 8001388:	2201      	movs	r2, #1
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_CRC_Init+0x3c>)
 800138e:	f000 fd31 	bl	8001df4 <HAL_CRC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001398:	f000 f8bd 	bl	8001516 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002f8 	.word	0x200002f8
 80013a4:	40023000 	.word	0x40023000

080013a8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_RNG_Init+0x20>)
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <MX_RNG_Init+0x24>)
 80013c0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_RNG_Init+0x20>)
 80013c4:	f002 fbe7 	bl	8003b96 <HAL_RNG_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80013ce:	f000 f8a2 	bl	8001516 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000340 	.word	0x20000340
 80013dc:	58001000 	.word	0x58001000

080013e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_RTC_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_RTC_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_RTC_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_RTC_Init+0x4c>)
 80013f2:	220f      	movs	r2, #15
 80013f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_RTC_Init+0x4c>)
 80013f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_RTC_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_RTC_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_RTC_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_RTC_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_RTC_Init+0x4c>)
 8001418:	f002 fbf2 	bl	8003c00 <HAL_RTC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 f878 	bl	8001516 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000031c 	.word	0x2000031c
 8001430:	40002800 	.word	0x40002800

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	2004      	movs	r0, #4
 800143a:	f7ff fe5d 	bl	80010f8 <LL_AHB2_GRP1_EnableClock>

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

    /* Start automatic synchronization */
    HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

    return;
 8001446:	bf00      	nop
}
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001456:	2000      	movs	r0, #0
 8001458:	f004 fae8 	bl	8005a2c <OTP_Read>
 800145c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <Config_HSE+0x1e>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fdc9 	bl	8001000 <LL_RCC_HSE_SetCapacitorTuning>
  }
  LL_RCC_HSE_SetCapacitorTuning(DEFAULT_HSE_TUNNING_CAPACITOR);
 800146e:	2012      	movs	r0, #18
 8001470:	f7ff fdc6 	bl	8001000 <LL_RCC_HSE_SetCapacitorTuning>
  return;
 8001474:	bf00      	nop
}
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Reset_Device>:


static void Reset_Device( void )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
    Reset_BackupDomain();
 8001480:	f000 f826 	bl	80014d0 <Reset_BackupDomain>

    Reset_IPCC();
 8001484:	f000 f802 	bl	800148c <Reset_IPCC>
#endif

    return;
 8001488:	bf00      	nop
}
 800148a:	bd80      	pop	{r7, pc}

0800148c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001490:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001494:	f7ff fe49 	bl	800112a <LL_AHB3_GRP1_EnableClock>

    LL_C1_IPCC_ClearFlag_CHx(
 8001498:	213f      	movs	r1, #63	; 0x3f
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <Reset_IPCC+0x40>)
 800149c:	f7ff fea4 	bl	80011e8 <LL_C1_IPCC_ClearFlag_CHx>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    LL_C2_IPCC_ClearFlag_CHx(
 80014a0:	213f      	movs	r1, #63	; 0x3f
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <Reset_IPCC+0x40>)
 80014a4:	f7ff feae 	bl	8001204 <LL_C2_IPCC_ClearFlag_CHx>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    LL_C1_IPCC_DisableTransmitChannel(
 80014a8:	213f      	movs	r1, #63	; 0x3f
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <Reset_IPCC+0x40>)
 80014ac:	f7ff fe56 	bl	800115c <LL_C1_IPCC_DisableTransmitChannel>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    LL_C2_IPCC_DisableTransmitChannel(
 80014b0:	213f      	movs	r1, #63	; 0x3f
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <Reset_IPCC+0x40>)
 80014b4:	f7ff fe75 	bl	80011a2 <LL_C2_IPCC_DisableTransmitChannel>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    LL_C1_IPCC_DisableReceiveChannel(
 80014b8:	213f      	movs	r1, #63	; 0x3f
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <Reset_IPCC+0x40>)
 80014bc:	f7ff fe60 	bl	8001180 <LL_C1_IPCC_DisableReceiveChannel>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    LL_C2_IPCC_DisableReceiveChannel(
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <Reset_IPCC+0x40>)
 80014c4:	f7ff fe7f 	bl	80011c6 <LL_C2_IPCC_DisableReceiveChannel>
            IPCC,
            LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
            | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

    return;
 80014c8:	bf00      	nop
}
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58000c00 	.word	0x58000c00

080014d0 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80014d4:	f7ff fdea 	bl	80010ac <LL_RCC_IsActiveFlag_PINRST>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <Reset_BackupDomain+0x2a>
 80014de:	f7ff fdf8 	bl	80010d2 <LL_RCC_IsActiveFlag_SFTRST>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d108      	bne.n	80014fa <Reset_BackupDomain+0x2a>
    {
        HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80014e8:	f000 fd92 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

        /**
         *  Write twice the value to flush the APB-AHB bridge
         *  This bit shall be written in the register before writing the next one
         */
        HAL_PWR_EnableBkUpAccess();
 80014ec:	f000 fd90 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

        __HAL_RCC_BACKUPRESET_FORCE();
 80014f0:	f7ff fdba 	bl	8001068 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80014f4:	f7ff fdc9 	bl	800108a <LL_RCC_ReleaseBackupDomainReset>
    }

    return;
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
}
 80014fc:	bd80      	pop	{r7, pc}

080014fe <Init_Exti>:

static void Init_Exti( void )
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001502:	f04f 30ff 	mov.w	r0, #4294967295
 8001506:	f7ff fd4f 	bl	8000fa8 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 800150a:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800150e:	f7ff fd61 	bl	8000fd4 <LL_EXTI_DisableIT_32_63>

  return;
 8001512:	bf00      	nop
}
 8001514:	bd80      	pop	{r7, pc}

08001516 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_RCC_SetRTCClockSource>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_RCC_EnableRTC>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_AHB1_GRP1_EnableClock>:
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_AHB3_GRP1_EnableClock>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c8:	68fb      	ldr	r3, [r7, #12]
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800160c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001610:	f7ff ffc8 	bl	80015a4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	202e      	movs	r0, #46	; 0x2e
 800161a:	f000 fb8c 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800161e:	202e      	movs	r0, #46	; 0x2e
 8001620:	f000 fba3 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2106      	movs	r1, #6
 8001628:	202c      	movs	r0, #44	; 0x2c
 800162a:	f000 fb84 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2106      	movs	r1, #6
 8001632:	202d      	movs	r0, #45	; 0x2d
 8001634:	f000 fb7f 	bl	8001d36 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_CRC_MspInit+0x24>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d103      	bne.n	8001656 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800164e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001652:	f7ff ff8e 	bl	8001572 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023000 	.word	0x40023000

08001664 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_RNG_MspInit+0x24>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d103      	bne.n	800167e <HAL_RNG_MspInit+0x1a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001676:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800167a:	f7ff ff93 	bl	80015a4 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58001000 	.word	0x58001000

0800168c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_RTC_MspInit+0x3c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d110      	bne.n	80016c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
      HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800169e:	f000 fcb7 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

      /**
      *  Write twice the value to flush the APB-AHB bridge
      *  This bit shall be written in the register before writing the next one
      */
      HAL_PWR_EnableBkUpAccess();
 80016a2:	f000 fcb5 	bl	8002010 <HAL_PWR_EnableBkUpAccess>
      __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80016a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016aa:	f7ff ff3b 	bl	8001524 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ae:	f7ff ff4f 	bl	8001550 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016b6:	f7ff ff8e 	bl	80015d6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
    HAL_RTCEx_EnableBypassShadow(hrtc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f002 fb8e 	bl	8003ddc <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40002800 	.word	0x40002800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f9a4 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800172c:	f000 fc4c 	bl	8001fc8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001738:	f7ff f968 	bl	8000a0c <HW_TS_RTC_Wakeup_Handler>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001744:	f004 ff70 	bl	8006628 <HW_IPCC_Tx_Handler>
  return;
 8001748:	bf00      	nop
}
 800174a:	bd80      	pop	{r7, pc}

0800174c <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001750:	f004 ff32 	bl	80065b8 <HW_IPCC_Rx_Handler>
  return;
 8001754:	bf00      	nop
}
 8001756:	bd80      	pop	{r7, pc}

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemInit+0xa0>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <SystemInit+0xa0>)
 8001764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <SystemInit+0xa0>)
 800176a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800178a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <SystemInit+0xa4>)
 8001798:	4013      	ands	r3, r2
 800179a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a8:	f023 0305 	bic.w	r3, r3, #5
 80017ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <SystemInit+0xa8>)
 80017ca:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <SystemInit+0xa8>)
 80017d2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	faf6fefb 	.word	0xfaf6fefb
 8001800:	22041000 	.word	0x22041000

08001804 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <SystemCoreClockUpdate+0x130>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d867      	bhi.n	80018fc <SystemCoreClockUpdate+0xf8>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <SystemCoreClockUpdate+0x30>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001869 	.word	0x08001869
 8001838:	080018fd 	.word	0x080018fd
 800183c:	080018fd 	.word	0x080018fd
 8001840:	080018fd 	.word	0x080018fd
 8001844:	08001871 	.word	0x08001871
 8001848:	080018fd 	.word	0x080018fd
 800184c:	080018fd 	.word	0x080018fd
 8001850:	080018fd 	.word	0x080018fd
 8001854:	08001879 	.word	0x08001879
 8001858:	080018fd 	.word	0x080018fd
 800185c:	080018fd 	.word	0x080018fd
 8001860:	080018fd 	.word	0x080018fd
 8001864:	08001881 	.word	0x08001881
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001868:	4a33      	ldr	r2, [pc, #204]	; (8001938 <SystemCoreClockUpdate+0x134>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6013      	str	r3, [r2, #0]
      break;
 800186e:	e049      	b.n	8001904 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <SystemCoreClockUpdate+0x134>)
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <SystemCoreClockUpdate+0x138>)
 8001874:	601a      	str	r2, [r3, #0]
      break;
 8001876:	e045      	b.n	8001904 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <SystemCoreClockUpdate+0x134>)
 800187a:	4a31      	ldr	r2, [pc, #196]	; (8001940 <SystemCoreClockUpdate+0x13c>)
 800187c:	601a      	str	r2, [r3, #0]
      break;
 800187e:	e041      	b.n	8001904 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	3301      	adds	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d105      	bne.n	80018ae <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80018a2:	4a26      	ldr	r2, [pc, #152]	; (800193c <SystemCoreClockUpdate+0x138>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00d      	b.n	80018ca <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d105      	bne.n	80018c0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <SystemCoreClockUpdate+0x13c>)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e004      	b.n	80018ca <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0f5b      	lsrs	r3, r3, #29
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	3301      	adds	r3, #1
 80018ec:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <SystemCoreClockUpdate+0x134>)
 80018f8:	6013      	str	r3, [r2, #0]
      break;
 80018fa:	e003      	b.n	8001904 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <SystemCoreClockUpdate+0x134>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6013      	str	r3, [r2, #0]
      break;
 8001902:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <SystemCoreClockUpdate+0x140>)
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <SystemCoreClockUpdate+0x134>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemCoreClockUpdate+0x134>)
 8001924:	6013      	str	r3, [r2, #0]

}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	08006f4c 	.word	0x08006f4c
 8001938:	20000004 	.word	0x20000004
 800193c:	00f42400 	.word	0x00f42400
 8001940:	01e84800 	.word	0x01e84800
 8001944:	08006f0c 	.word	0x08006f0c

08001948 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001948:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194c:	3304      	adds	r3, #4

0800194e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001950:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001952:	d3f9      	bcc.n	8001948 <CopyDataInit>
  bx lr
 8001954:	4770      	bx	lr

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001956:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001958:	3004      	adds	r0, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800195a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>
  bx lr
 800195e:	4770      	bx	lr

08001960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001962:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001964:	f7ff fef8 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <LoopForever+0x8>)
 800196a:	490c      	ldr	r1, [pc, #48]	; (800199c <LoopForever+0xc>)
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <LoopForever+0x10>)
 800196e:	2300      	movs	r3, #0
 8001970:	f7ff ffed 	bl	800194e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <LoopForever+0x14>)
 8001976:	490c      	ldr	r1, [pc, #48]	; (80019a8 <LoopForever+0x18>)
 8001978:	2300      	movs	r3, #0
 800197a:	f7ff ffee 	bl	800195a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <LoopForever+0x1c>)
 8001980:	490b      	ldr	r1, [pc, #44]	; (80019b0 <LoopForever+0x20>)
 8001982:	2300      	movs	r3, #0
 8001984:	f7ff ffe9 	bl	800195a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001988:	f005 f9b4 	bl	8006cf4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800198c:	f7ff fc48 	bl	8001220 <main>

08001990 <LoopForever>:

LoopForever:
  b LoopForever
 8001990:	e7fe      	b.n	8001990 <LoopForever>
 8001992:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001994:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001998:	20000004 	.word	0x20000004
 800199c:	2000002c 	.word	0x2000002c
 80019a0:	08006fcc 	.word	0x08006fcc
  INIT_BSS _sbss, _ebss
 80019a4:	200001b0 	.word	0x200001b0
 80019a8:	2000035c 	.word	0x2000035c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80019ac:	200301e0 	.word	0x200301e0
 80019b0:	20030a57 	.word	0x20030a57

080019b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_Init+0x3c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_Init+0x3c>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ce:	2003      	movs	r0, #3
 80019d0:	f000 f9a6 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d4:	2000      	movs	r0, #0
 80019d6:	f000 f80f 	bl	80019f8 <HAL_InitTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	e001      	b.n	80019ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e6:	f7ff fe0f 	bl	8001608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58004000 	.word	0x58004000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d024      	beq.n	8001a56 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a0c:	f001 fbd4 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f9bc 	bl	8001da2 <HAL_SYSTICK_Config>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	d809      	bhi.n	8001a4a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a36:	2200      	movs	r2, #0
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	f000 f97a 	bl	8001d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_InitTick+0x70>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e004      	b.n	8001a5a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e001      	b.n	8001a5a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000354 	.word	0x20000354

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000354 	.word	0x20000354

08001aac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTickPrio+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db10      	blt.n	8001b98 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <__NVIC_DisableIRQ+0x40>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b94:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0c      	blt.n	8001bd4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <__NVIC_SetPendingIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	3340      	adds	r3, #64	; 0x40
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0c      	blt.n	8001c10 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <__NVIC_ClearPendingIRQ+0x38>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	3360      	adds	r3, #96	; 0x60
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fecb 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff fee2 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fed5 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fee5 	bl	8001b64 <__NVIC_DisableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff96 	bl	8001cdc <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff feed 	bl	8001ba8 <__NVIC_SetPendingIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fefd 	bl	8001be4 <__NVIC_ClearPendingIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e054      	b.n	8001eb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7f5b      	ldrb	r3, [r3, #29]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fc10 	bl	800163c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_CRC_Init+0xc4>)
 8001e30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0218 	bic.w	r2, r2, #24
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e00c      	b.n	8001e5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f834 	bl	8001ebc <HAL_CRCEx_Polynomial_Set>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e028      	b.n	8001eb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	e004      	b.n	8001e7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6912      	ldr	r2, [r2, #16]
 8001e7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	04c11db7 	.word	0x04c11db7

08001ebc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ecc:	231f      	movs	r3, #31
 8001ece:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ed0:	bf00      	nop
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	613a      	str	r2, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	d846      	bhi.n	8001f84 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f85 	.word	0x08001f85
 8001f04:	08001f85 	.word	0x08001f85
 8001f08:	08001f85 	.word	0x08001f85
 8001f0c:	08001f85 	.word	0x08001f85
 8001f10:	08001f85 	.word	0x08001f85
 8001f14:	08001f85 	.word	0x08001f85
 8001f18:	08001f85 	.word	0x08001f85
 8001f1c:	08001f79 	.word	0x08001f79
 8001f20:	08001f85 	.word	0x08001f85
 8001f24:	08001f85 	.word	0x08001f85
 8001f28:	08001f85 	.word	0x08001f85
 8001f2c:	08001f85 	.word	0x08001f85
 8001f30:	08001f85 	.word	0x08001f85
 8001f34:	08001f85 	.word	0x08001f85
 8001f38:	08001f85 	.word	0x08001f85
 8001f3c:	08001f6d 	.word	0x08001f6d
 8001f40:	08001f85 	.word	0x08001f85
 8001f44:	08001f85 	.word	0x08001f85
 8001f48:	08001f85 	.word	0x08001f85
 8001f4c:	08001f85 	.word	0x08001f85
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001f85 	.word	0x08001f85
 8001f58:	08001f85 	.word	0x08001f85
 8001f5c:	08001f61 	.word	0x08001f61
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d913      	bls.n	8001f8e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f6a:	e010      	b.n	8001f8e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d90f      	bls.n	8001f92 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f76:	e00c      	b.n	8001f92 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	d90b      	bls.n	8001f96 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001f82:	e008      	b.n	8001f96 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
      break;
 8001f88:	e006      	b.n	8001f98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e004      	b.n	8001f98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e002      	b.n	8001f98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f92:	bf00      	nop
 8001f94:	e000      	b.n	8001f98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f96:	bf00      	nop
  }
  if (status == HAL_OK)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 0118 	bic.w	r1, r3, #24
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_HSEM_IRQHandler+0x30>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_HSEM_IRQHandler+0x30>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <HAL_HSEM_IRQHandler+0x30>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_HSEM_IRQHandler+0x30>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f807 	bl	8001ffc <HAL_HSEM_FreeCallback>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	58001500 	.word	0x58001500

08001ffc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	58000400 	.word	0x58000400

08002030 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_PWREx_GetVoltageRange+0x18>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	58000400 	.word	0x58000400

0800204c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800205e:	d101      	bne.n	8002064 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_RCC_HSE_EnableBypass>:
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_RCC_HSE_DisableBypass>:
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_HSE_Enable>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_RCC_HSE_Disable>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_HSE_IsReady>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020fa:	d101      	bne.n	8002100 <LL_RCC_HSE_IsReady+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_RCC_HSE_IsReady+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_RCC_HSI_Enable>:
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_RCC_HSI_Disable>:
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_HSI_IsReady>:
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215a:	d101      	bne.n	8002160 <LL_RCC_HSI_IsReady+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_RCC_HSI_IsReady+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_RCC_HSI_SetCalibTrimming>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_HSI48_Enable>:
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_HSI48_Disable>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_HSI48_IsReady>:
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d101      	bne.n	80021f2 <LL_RCC_HSI48_IsReady+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_RCC_HSI48_IsReady+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_LSE_Enable>:
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_LSE_Disable>:
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_LSE_EnableBypass>:
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_RCC_LSE_DisableBypass>:
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_RCC_LSE_IsReady>:
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <LL_RCC_LSE_IsReady+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_RCC_LSE_IsReady+0x1a>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_LSI1_Enable>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_LSI1_Disable>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_LSI1_IsReady>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d101      	bne.n	8002306 <LL_RCC_LSI1_IsReady+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_RCC_LSI1_IsReady+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_RCC_LSI2_Enable>:
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_RCC_LSI2_Disable>:
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RCC_LSI2_IsReady>:
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b08      	cmp	r3, #8
 8002368:	d101      	bne.n	800236e <LL_RCC_LSI2_IsReady+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_RCC_LSI2_IsReady+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_RCC_LSI2_SetTrimming>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_MSI_Enable>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_MSI_Disable>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_RCC_MSI_IsReady>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d101      	bne.n	80023fa <LL_RCC_MSI_IsReady+0x16>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <LL_RCC_MSI_IsReady+0x18>
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_RCC_MSI_SetRange>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_RCC_MSI_GetRange>:
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2bb0      	cmp	r3, #176	; 0xb0
 8002444:	d901      	bls.n	800244a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002446:	23b0      	movs	r3, #176	; 0xb0
 8002448:	607b      	str	r3, [r7, #4]
  return msiRange;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_RCC_SetSysClkSource>:
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 0203 	bic.w	r2, r3, #3
 8002494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_GetSysClkSource>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_RCC_SetAHBPrescaler>:
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_SetAHB4Prescaler>:
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002526:	f023 020f 	bic.w	r2, r3, #15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_RCC_SetAPB1Prescaler>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_RCC_SetAPB2Prescaler>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_RCC_GetAHBPrescaler>:
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_RCC_GetAHB4Prescaler>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_RCC_PLL_Enable>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_RCC_PLL_Disable>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_RCC_PLL_IsReady>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002616:	d101      	bne.n	800261c <LL_RCC_PLL_IsReady+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_RCC_PLL_IsReady+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_RCC_PLL_GetN>:
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_PLL_GetR>:
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_PLL_GetDivider>:
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_RCC_PLL_GetMainSource>:
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0303 	and.w	r3, r3, #3
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_RCC_IsActiveFlag_HPRE>:
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d101      	bne.n	80026a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c2:	d101      	bne.n	80026c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d101      	bne.n	80026ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_IsActiveFlag_PPRE1>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800270c:	d101      	bne.n	8002712 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002730:	d101      	bne.n	8002736 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08d      	sub	sp, #52	; 0x34
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e386      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 808f 	beq.w	8002882 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002764:	f7ff fea1 	bl	80024aa <LL_RCC_GetSysClkSource>
 8002768:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276a:	f7ff ff82 	bl	8002672 <LL_RCC_PLL_GetMainSource>
 800276e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x3e>
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d149      	bne.n	8002810 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2b01      	cmp	r3, #1
 8002780:	d146      	bne.n	8002810 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002782:	f7ff fe2f 	bl	80023e4 <LL_RCC_MSI_IsReady>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x54>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e365      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800279c:	f7ff fe47 	bl	800242e <LL_RCC_MSI_GetRange>
 80027a0:	4603      	mov	r3, r0
 80027a2:	429c      	cmp	r4, r3
 80027a4:	d914      	bls.n	80027d0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fd18 	bl	80031e0 <RCC_SetFlashLatencyFromMSIRange>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e354      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fe21 	bl	8002406 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fe45 	bl	8002458 <LL_RCC_MSI_SetCalibTrimming>
 80027ce:	e013      	b.n	80027f8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fe16 	bl	8002406 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe3a 	bl	8002458 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fcf9 	bl	80031e0 <RCC_SetFlashLatencyFromMSIRange>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e335      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80027f8:	f7ff f804 	bl	8001804 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027fc:	4bb4      	ldr	r3, [pc, #720]	; (8002ad0 <HAL_RCC_OscConfig+0x38c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f8f9 	bl	80019f8 <HAL_InitTick>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d039      	beq.n	8002880 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e329      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01e      	beq.n	8002856 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002818:	f7ff fdc6 	bl	80023a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281c:	f7ff f93a 	bl	8001a94 <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002824:	f7ff f936 	bl	8001a94 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e316      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002836:	f7ff fdd5 	bl	80023e4 <LL_RCC_MSI_IsReady>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f1      	beq.n	8002824 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fdde 	bl	8002406 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fe02 	bl	8002458 <LL_RCC_MSI_SetCalibTrimming>
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002856:	f7ff fdb6 	bl	80023c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800285a:	f7ff f91b 	bl	8001a94 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002862:	f7ff f917 	bl	8001a94 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e2f7      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002874:	f7ff fdb6 	bl	80023e4 <LL_RCC_MSI_IsReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f1      	bne.n	8002862 <HAL_RCC_OscConfig+0x11e>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d05a      	beq.n	8002944 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	f7ff fe0c 	bl	80024aa <LL_RCC_GetSysClkSource>
 8002892:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002894:	f7ff feed 	bl	8002672 <LL_RCC_PLL_GetMainSource>
 8002898:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x168>
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10a      	bne.n	80028c2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	f7ff fc1c 	bl	80020e8 <LL_RCC_HSE_IsReady>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d045      	beq.n	8002942 <HAL_RCC_OscConfig+0x1fe>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d141      	bne.n	8002942 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e2d0      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_OscConfig+0x18e>
 80028cc:	f7ff fbee 	bl	80020ac <LL_RCC_HSE_Enable>
 80028d0:	e00d      	b.n	80028ee <HAL_RCC_OscConfig+0x1aa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028da:	d104      	bne.n	80028e6 <HAL_RCC_OscConfig+0x1a2>
 80028dc:	f7ff fbc8 	bl	8002070 <LL_RCC_HSE_EnableBypass>
 80028e0:	f7ff fbe4 	bl	80020ac <LL_RCC_HSE_Enable>
 80028e4:	e003      	b.n	80028ee <HAL_RCC_OscConfig+0x1aa>
 80028e6:	f7ff fbf0 	bl	80020ca <LL_RCC_HSE_Disable>
 80028ea:	f7ff fbd0 	bl	800208e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff f8cd 	bl	8001a94 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fe:	f7ff f8c9 	bl	8001a94 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e2a9      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002910:	f7ff fbea 	bl	80020e8 <LL_RCC_HSE_IsReady>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_OscConfig+0x1ba>
 800291a:	e013      	b.n	8002944 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff f8ba 	bl	8001a94 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff f8b6 	bl	8001a94 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e296      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002936:	f7ff fbd7 	bl	80020e8 <LL_RCC_HSE_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f1      	bne.n	8002924 <HAL_RCC_OscConfig+0x1e0>
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002942:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d051      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002950:	f7ff fdab 	bl	80024aa <LL_RCC_GetSysClkSource>
 8002954:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002956:	f7ff fe8c 	bl	8002672 <LL_RCC_PLL_GetMainSource>
 800295a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x22a>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d113      	bne.n	8002990 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d110      	bne.n	8002990 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296e:	f7ff fbeb 	bl	8002148 <LL_RCC_HSI_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x240>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e26f      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fbef 	bl	800216c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298e:	e031      	b.n	80029f4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d019      	beq.n	80029cc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	f7ff fbb8 	bl	800210c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff f87a 	bl	8001a94 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7ff f876 	bl	8001a94 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e256      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80029b6:	f7ff fbc7 	bl	8002148 <LL_RCC_HSI_IsReady>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f1      	beq.n	80029a4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fbd1 	bl	800216c <LL_RCC_HSI_SetCalibTrimming>
 80029ca:	e013      	b.n	80029f4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029cc:	f7ff fbad 	bl	800212a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7ff f860 	bl	8001a94 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d8:	f7ff f85c 	bl	8001a94 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e23c      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029ea:	f7ff fbad 	bl	8002148 <LL_RCC_HSI_IsReady>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f1      	bne.n	80029d8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a2 	beq.w	8002b52 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d075      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d046      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002a22:	f7ff fc64 	bl	80022ee <LL_RCC_LSI1_IsReady>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d113      	bne.n	8002a54 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002a2c:	f7ff fc3d 	bl	80022aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a30:	f7ff f830 	bl	8001a94 <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a38:	f7ff f82c 	bl	8001a94 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e20c      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a4a:	f7ff fc50 	bl	80022ee <LL_RCC_LSI1_IsReady>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f1      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002a54:	f7ff fc5d 	bl	8002312 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f81c 	bl	8001a94 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a60:	f7ff f818 	bl	8001a94 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1f8      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a72:	f7ff fc70 	bl	8002356 <LL_RCC_LSI2_IsReady>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f1      	beq.n	8002a60 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc7a 	bl	800237a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a86:	f7ff fc21 	bl	80022cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f803 	bl	8001a94 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a92:	f7fe ffff 	bl	8001a94 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1df      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002aa4:	f7ff fc23 	bl	80022ee <LL_RCC_LSI1_IsReady>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f1      	bne.n	8002a92 <HAL_RCC_OscConfig+0x34e>
 8002aae:	e050      	b.n	8002b52 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002ab0:	f7ff fbfb 	bl	80022aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe ffee 	bl	8001a94 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002abc:	f7fe ffea 	bl	8001a94 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d904      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1ca      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
 8002ace:	bf00      	nop
 8002ad0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002ad4:	f7ff fc0b 	bl	80022ee <LL_RCC_LSI1_IsReady>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ee      	beq.n	8002abc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002ade:	f7ff fc29 	bl	8002334 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ae4:	f7fe ffd6 	bl	8001a94 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1b6      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002af6:	f7ff fc2e 	bl	8002356 <LL_RCC_LSI2_IsReady>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f1      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x3a0>
 8002b00:	e027      	b.n	8002b52 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002b02:	f7ff fc17 	bl	8002334 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe ffc5 	bl	8001a94 <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b0e:	f7fe ffc1 	bl	8001a94 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1a1      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002b20:	f7ff fc19 	bl	8002356 <LL_RCC_LSI2_IsReady>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f1      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002b2a:	f7ff fbcf 	bl	80022cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe ffb1 	bl	8001a94 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b36:	f7fe ffad 	bl	8001a94 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e18d      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b48:	f7ff fbd1 	bl	80022ee <LL_RCC_LSI1_IsReady>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f1      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5e:	4bb5      	ldr	r3, [pc, #724]	; (8002e34 <HAL_RCC_OscConfig+0x6f0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b6a:	f7ff fa51 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe ff91 	bl	8001a94 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe ff8d 	bl	8001a94 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e16d      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4baa      	ldr	r3, [pc, #680]	; (8002e34 <HAL_RCC_OscConfig+0x6f0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x45e>
 8002b9c:	f7ff fb2f 	bl	80021fe <LL_RCC_LSE_Enable>
 8002ba0:	e00c      	b.n	8002bbc <HAL_RCC_OscConfig+0x478>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d104      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x470>
 8002baa:	f7ff fb4a 	bl	8002242 <LL_RCC_LSE_EnableBypass>
 8002bae:	f7ff fb26 	bl	80021fe <LL_RCC_LSE_Enable>
 8002bb2:	e003      	b.n	8002bbc <HAL_RCC_OscConfig+0x478>
 8002bb4:	f7ff fb34 	bl	8002220 <LL_RCC_LSE_Disable>
 8002bb8:	f7ff fb54 	bl	8002264 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d014      	beq.n	8002bee <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe ff66 	bl	8001a94 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe ff62 	bl	8001a94 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e140      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002be2:	f7ff fb50 	bl	8002286 <LL_RCC_LSE_IsReady>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ef      	beq.n	8002bcc <HAL_RCC_OscConfig+0x488>
 8002bec:	e013      	b.n	8002c16 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe ff51 	bl	8001a94 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe ff4d 	bl	8001a94 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e12b      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c0c:	f7ff fb3b 	bl	8002286 <LL_RCC_LSE_IsReady>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ef      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d014      	beq.n	8002c54 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2a:	f7ff fab4 	bl	8002196 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe ff31 	bl	8001a94 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7fe ff2d 	bl	8001a94 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e10d      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c48:	f7ff fac7 	bl	80021da <LL_RCC_HSI48_IsReady>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f1      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4f2>
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c54:	f7ff fab0 	bl	80021b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe ff1c 	bl	8001a94 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c60:	f7fe ff18 	bl	8001a94 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0f8      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c72:	f7ff fab2 	bl	80021da <LL_RCC_HSI48_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f1      	bne.n	8002c60 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80ee 	beq.w	8002e62 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c86:	f7ff fc10 	bl	80024aa <LL_RCC_GetSysClkSource>
 8002c8a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f040 80af 	bne.w	8002dfc <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d123      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d114      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d05d      	beq.n	8002db0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d058      	beq.n	8002dac <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ab      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d0c:	f7ff fc6b 	bl	80025e6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d10:	f7fe fec0 	bl	8001a94 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe febc 	bl	8001a94 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e09c      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ef      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_RCC_OscConfig+0x6f4>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d50:	0212      	lsls	r2, r2, #8
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d64:	430a      	orrs	r2, r1
 8002d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d6e:	f7ff fc2b 	bl	80025c8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d82:	f7fe fe87 	bl	8001a94 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fe83 	bl	8001a94 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e063      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002daa:	e05a      	b.n	8002e62 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e059      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d151      	bne.n	8002e62 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dbe:	f7ff fc03 	bl	80025c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd2:	f7fe fe5f 	bl	8001a94 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe fe5b 	bl	8001a94 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e03b      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ef      	beq.n	8002dda <HAL_RCC_OscConfig+0x696>
 8002dfa:	e032      	b.n	8002e62 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d02d      	beq.n	8002e5e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	f7ff fbf0 	bl	80025e6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e20:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fe33 	bl	8001a94 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	e00d      	b.n	8002e4e <HAL_RCC_OscConfig+0x70a>
 8002e32:	bf00      	nop
 8002e34:	58000400 	.word	0x58000400
 8002e38:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fe2a 	bl	8001a94 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ef      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6f8>
 8002e5c:	e001      	b.n	8002e62 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3734      	adds	r7, #52	; 0x34
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e12a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b97      	ldr	r3, [pc, #604]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d91b      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b94      	ldr	r3, [pc, #592]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4992      	ldr	r1, [pc, #584]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fdf9 	bl	8001a94 <HAL_GetTick>
 8002ea2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ea6:	f7fe fdf5 	bl	8001a94 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e10e      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb8:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d1ef      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff faf3 	bl	80024c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fdda 	bl	8001a94 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ee4:	f7fe fdd6 	bl	8001a94 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0ef      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ef6:	f7ff fbc8 	bl	800268a <LL_RCC_IsActiveFlag_HPRE>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f1      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff faea 	bl	80024ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f16:	f7fe fdbd 	bl	8001a94 <HAL_GetTick>
 8002f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f1e:	f7fe fdb9 	bl	8001a94 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0d2      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f30:	f7ff fbbd 	bl	80026ae <LL_RCC_IsActiveFlag_C2HPRE>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f1      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fae3 	bl	8002516 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fda0 	bl	8001a94 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f58:	f7fe fd9c 	bl	8001a94 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0b5      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f6a:	f7ff fbb3 	bl	80026d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f1      	beq.n	8002f58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fadd 	bl	8002544 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe fd83 	bl	8001a94 <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f92:	f7fe fd7f 	bl	8001a94 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e098      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fa4:	f7ff fba9 	bl	80026fa <LL_RCC_IsActiveFlag_PPRE1>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f1      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d017      	beq.n	8002fea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fad3 	bl	800256c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fc6:	f7fe fd65 	bl	8001a94 <HAL_GetTick>
 8002fca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fce:	f7fe fd61 	bl	8001a94 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e07a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fe0:	f7ff fb9d 	bl	800271e <LL_RCC_IsActiveFlag_PPRE2>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f1      	beq.n	8002fce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d043      	beq.n	800307e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d106      	bne.n	800300c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ffe:	f7ff f873 	bl	80020e8 <LL_RCC_HSE_IsReady>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11e      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e064      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003014:	f7ff faf6 	bl	8002604 <LL_RCC_PLL_IsReady>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d113      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e059      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800302a:	f7ff f9db 	bl	80023e4 <LL_RCC_MSI_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e04e      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003038:	f7ff f886 	bl	8002148 <LL_RCC_HSI_IsReady>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e047      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fa19 	bl	8002482 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe fd20 	bl	8001a94 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fe fd1c 	bl	8001a94 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e033      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	f7ff fa1c 	bl	80024aa <LL_RCC_GetSysClkSource>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	429a      	cmp	r2, r3
 800307c:	d1ec      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d21b      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 0207 	bic.w	r2, r3, #7
 8003094:	4912      	ldr	r1, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309c:	f7fe fcfa 	bl	8001a94 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030a4:	f7fe fcf6 	bl	8001a94 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d1ef      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80030c4:	f7fe fb9e 	bl	8001804 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80030c8:	f7fe fcf0 	bl	8001aac <HAL_GetTickPrio>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fc92 	bl	80019f8 <HAL_InitTick>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	58004000 	.word	0x58004000

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	f7ff f9de 	bl	80024aa <LL_RCC_GetSysClkSource>
 80030ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030f6:	f7ff f99a 	bl	800242e <LL_RCC_MSI_GetRange>
 80030fa:	4603      	mov	r3, r0
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e04a      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b04      	cmp	r3, #4
 8003110:	d102      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e044      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d10a      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800311e:	f7fe ff95 	bl	800204c <LL_RCC_HSE_IsEnabledDiv2>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e039      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e036      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003134:	f7ff fa9d 	bl	8002672 <LL_RCC_PLL_GetMainSource>
 8003138:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d002      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x62>
 8003140:	2b03      	cmp	r3, #3
 8003142:	d003      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x68>
 8003144:	e00d      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003148:	60bb      	str	r3, [r7, #8]
        break;
 800314a:	e015      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800314c:	f7fe ff7e 	bl	800204c <LL_RCC_HSE_IsEnabledDiv2>
 8003150:	4603      	mov	r3, r0
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003158:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800315a:	e00d      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800315e:	60bb      	str	r3, [r7, #8]
        break;
 8003160:	e00a      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003162:	f7ff f964 	bl	800242e <LL_RCC_MSI_GetRange>
 8003166:	4603      	mov	r3, r0
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	60bb      	str	r3, [r7, #8]
        break;
 8003176:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003178:	f7ff fa56 	bl	8002628 <LL_RCC_PLL_GetN>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	fb03 f402 	mul.w	r4, r3, r2
 8003184:	f7ff fa69 	bl	800265a <LL_RCC_PLL_GetDivider>
 8003188:	4603      	mov	r3, r0
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	3301      	adds	r3, #1
 800318e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003192:	f7ff fa56 	bl	8002642 <LL_RCC_PLL_GetR>
 8003196:	4603      	mov	r3, r0
 8003198:	0f5b      	lsrs	r3, r3, #29
 800319a:	3301      	adds	r3, #1
 800319c:	fbb4 f3f3 	udiv	r3, r4, r3
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	08006f4c 	.word	0x08006f4c
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	01e84800 	.word	0x01e84800

080031b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b598      	push	{r3, r4, r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80031bc:	f7ff ff92 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80031c0:	4604      	mov	r4, r0
 80031c2:	f7ff f9e7 	bl	8002594 <LL_RCC_GetAHBPrescaler>
 80031c6:	4603      	mov	r3, r0
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a03      	ldr	r2, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x24>)
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd98      	pop	{r3, r4, r7, pc}
 80031dc:	08006f0c 	.word	0x08006f0c

080031e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2bb0      	cmp	r3, #176	; 0xb0
 80031ec:	d903      	bls.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e007      	b.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003204:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003206:	f7ff f9d1 	bl	80025ac <LL_RCC_GetAHB4Prescaler>
 800320a:	4603      	mov	r3, r0
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0c9c      	lsrs	r4, r3, #18
 800322a:	f7fe ff01 	bl	8002030 <HAL_PWREx_GetVoltageRange>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	4620      	mov	r0, r4
 8003234:	f000 f80c 	bl	8003250 <RCC_SetFlashLatency>
 8003238:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	bf00      	nop
 8003244:	08006f4c 	.word	0x08006f4c
 8003248:	08006f0c 	.word	0x08006f0c
 800324c:	431bde83 	.word	0x431bde83

08003250 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b093      	sub	sp, #76	; 0x4c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <RCC_SetFlashLatency+0xf0>)
 800325c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003266:	4a37      	ldr	r2, [pc, #220]	; (8003344 <RCC_SetFlashLatency+0xf4>)
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	ca07      	ldmia	r2, {r0, r1, r2}
 800326e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003272:	4b35      	ldr	r3, [pc, #212]	; (8003348 <RCC_SetFlashLatency+0xf8>)
 8003274:	f107 040c 	add.w	r4, r7, #12
 8003278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800327a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800327e:	2300      	movs	r3, #0
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d11c      	bne.n	80032c4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800328a:	2300      	movs	r3, #0
 800328c:	643b      	str	r3, [r7, #64]	; 0x40
 800328e:	e015      	b.n	80032bc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003298:	4413      	add	r3, r2
 800329a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d808      	bhi.n	80032b6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032ac:	4413      	add	r3, r2
 80032ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032b4:	e022      	b.n	80032fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b8:	3301      	adds	r3, #1
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
 80032bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d9e6      	bls.n	8003290 <RCC_SetFlashLatency+0x40>
 80032c2:	e01b      	b.n	80032fc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c8:	e015      	b.n	80032f6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032d2:	4413      	add	r3, r2
 80032d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d808      	bhi.n	80032f0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032e6:	4413      	add	r3, r2
 80032e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032ee:	e005      	b.n	80032fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f2:	3301      	adds	r3, #1
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d9e6      	bls.n	80032ca <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <RCC_SetFlashLatency+0xfc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 0207 	bic.w	r2, r3, #7
 8003304:	4911      	ldr	r1, [pc, #68]	; (800334c <RCC_SetFlashLatency+0xfc>)
 8003306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800330c:	f7fe fbc2 	bl	8001a94 <HAL_GetTick>
 8003310:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003312:	e008      	b.n	8003326 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003314:	f7fe fbbe 	bl	8001a94 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e007      	b.n	8003336 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <RCC_SetFlashLatency+0xfc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003330:	429a      	cmp	r2, r3
 8003332:	d1ef      	bne.n	8003314 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	374c      	adds	r7, #76	; 0x4c
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	08006d98 	.word	0x08006d98
 8003344:	08006da8 	.word	0x08006da8
 8003348:	08006db4 	.word	0x08006db4
 800334c:	58004000 	.word	0x58004000

08003350 <LL_RCC_LSE_IsEnabled>:
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <LL_RCC_LSE_IsEnabled+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_RCC_LSE_IsEnabled+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_LSE_IsReady>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d101      	bne.n	800338c <LL_RCC_LSE_IsReady+0x18>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <LL_RCC_LSE_IsReady+0x1a>
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_SetRFWKPClockSource>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_RCC_SetSMPSClockSource>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4313      	orrs	r3, r2
 80033de:	624b      	str	r3, [r1, #36]	; 0x24
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_SetSMPSPrescaler>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_RCC_SetUSARTClockSource>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 0203 	bic.w	r2, r3, #3
 8003428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_RCC_SetLPUARTClockSource>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_RCC_SetI2CClockSource>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <LL_RCC_SetLPTIMClockSource>:
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_RCC_SetSAIClockSource>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <LL_RCC_SetRNGClockSource>:
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800351a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_RCC_SetCLK48ClockSource>:
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_SetUSBClockSource>:
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffe3 	bl	8003532 <LL_RCC_SetCLK48ClockSource>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <LL_RCC_SetADCClockSource>:
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_SetRTCClockSource>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_RCC_GetRTCClockSource>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_RCC_ForceBackupDomainReset>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_RCC_PLLSAI1_Enable>:
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800363c:	6013      	str	r3, [r2, #0]
}
 800363e:	bf00      	nop
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_RCC_PLLSAI1_Disable>:
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_PLLSAI1_IsReady>:
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003678:	d101      	bne.n	800367e <LL_RCC_PLLSAI1_IsReady+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b088      	sub	sp, #32
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003696:	2300      	movs	r3, #0
 8003698:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d033      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ae:	d00c      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b4:	d802      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ba:	e017      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x62>
 80036bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c0:	d017      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80036c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c6:	d016      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80036c8:	e010      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80036da:	e00d      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f947 	bl	8003974 <RCCEx_PLLSAI1_ConfigNP>
 80036e6:	4603      	mov	r3, r0
 80036e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
        break;
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	7ffb      	ldrb	r3, [r7, #31]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fee9 	bl	80034da <LL_RCC_SetSAIClockSource>
 8003708:	e001      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003716:	2b00      	cmp	r3, #0
 8003718:	d046      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800371a:	f7ff ff57 	bl	80035cc <LL_RCC_GetRTCClockSource>
 800371e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	429a      	cmp	r2, r3
 8003728:	d03c      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800372a:	f7fe fc71 	bl	8002010 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff31 	bl	80035a0 <LL_RCC_SetRTCClockSource>
 800373e:	e02e      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800374a:	f7ff ff4c 	bl	80035e6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800374e:	f7ff ff5b 	bl	8003608 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800376a:	f7ff fdf1 	bl	8003350 <LL_RCC_LSE_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d114      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fe f98e 	bl	8001a94 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800377a:	e00b      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe f98a 	bl	8001a94 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d902      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	77fb      	strb	r3, [r7, #31]
              break;
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003794:	f7ff fdee 	bl	8003374 <LL_RCC_LSE_IsReady>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d1ee      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	77bb      	strb	r3, [r7, #30]
 80037a2:	e001      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fe2b 	bl	8003414 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fe36 	bl	8003440 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe5e 	bl	80034a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fe53 	bl	80034a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fe2b 	bl	800346c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fe20 	bl	800346c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d022      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fe8e 	bl	800355e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384a:	d107      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003864:	d10b      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f8dd 	bl	8003a2a <RCCEx_PLLSAI1_ConfigNQ>
 8003870:	4603      	mov	r3, r0
 8003872:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d02b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800389c:	d003      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fe2b 	bl	8003506 <LL_RCC_SetRNGClockSource>
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	2000      	movs	r0, #0
 80038be:	f7ff fe22 	bl	8003506 <LL_RCC_SetRNGClockSource>
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff fe35 	bl	8003532 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038d0:	d107      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d022      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fe3e 	bl	8003574 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d107      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f8dd 	bl	8003ae0 <RCCEx_PLLSAI1_ConfigNR>
 8003926:	4603      	mov	r3, r0
 8003928:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800392a:	7ffb      	ldrb	r3, [r7, #31]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003930:	7ffb      	ldrb	r3, [r7, #31]
 8003932:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fd27 	bl	8003398 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fd46 	bl	80033ec <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fd2d 	bl	80033c4 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 800396a:	7fbb      	ldrb	r3, [r7, #30]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003980:	f7ff fe62 	bl	8003648 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003984:	f7fe f886 	bl	8001a94 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800398a:	e009      	b.n	80039a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398c:	f7fe f882 	bl	8001a94 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	73fb      	strb	r3, [r7, #15]
      break;
 800399e:	e004      	b.n	80039aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039a0:	f7ff fe61 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d137      	bne.n	8003a20 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039da:	4313      	orrs	r3, r2
 80039dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039de:	f7ff fe24 	bl	800362a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e2:	f7fe f857 	bl	8001a94 <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039e8:	e009      	b.n	80039fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039ea:	f7fe f853 	bl	8001a94 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d902      	bls.n	80039fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	73fb      	strb	r3, [r7, #15]
        break;
 80039fc:	e004      	b.n	8003a08 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039fe:	f7ff fe32 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d1f0      	bne.n	80039ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a36:	f7ff fe07 	bl	8003648 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe f82b 	bl	8001a94 <HAL_GetTick>
 8003a3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a40:	e009      	b.n	8003a56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a42:	f7fe f827 	bl	8001a94 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e004      	b.n	8003a60 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a56:	f7ff fe06 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d137      	bne.n	8003ad6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a94:	f7ff fdc9 	bl	800362a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd fffc 	bl	8001a94 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa0:	f7fd fff8 	bl	8001a94 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e004      	b.n	8003abe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ab4:	f7ff fdd7 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d1f0      	bne.n	8003aa0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003aec:	f7ff fdac 	bl	8003648 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003af0:	f7fd ffd0 	bl	8001a94 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003af6:	e009      	b.n	8003b0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af8:	f7fd ffcc 	bl	8001a94 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0a:	e004      	b.n	8003b16 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b0c:	f7ff fdab 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d137      	bne.n	8003b8c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b46:	4313      	orrs	r3, r2
 8003b48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b4a:	f7ff fd6e 	bl	800362a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fd ffa1 	bl	8001a94 <HAL_GetTick>
 8003b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b54:	e009      	b.n	8003b6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b56:	f7fd ff9d 	bl	8001a94 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d902      	bls.n	8003b6a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	73fb      	strb	r3, [r7, #15]
        break;
 8003b68:	e004      	b.n	8003b74 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b6a:	f7ff fd7c 	bl	8003666 <LL_RCC_PLLSAI1_IsReady>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d1f0      	bne.n	8003b56 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e027      	b.n	8003bf8 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7a5b      	ldrb	r3, [r3, #9]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd fd53 	bl	8001664 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0120 	bic.w	r1, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0204 	orr.w	r2, r2, #4
 8003be8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e090      	b.n	8003d34 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fd30 	bl	800168c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	22ca      	movs	r2, #202	; 0xca
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2253      	movs	r2, #83	; 0x53
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f89f 	bl	8003d88 <RTC_EnterInitMode>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e067      	b.n	8003d34 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c76:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0203 	bic.w	r2, r2, #3
 8003cd2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d113      	bne.n	8003d22 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f81e 	bl	8003d3c <HAL_RTC_WaitForSynchro>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	22ff      	movs	r2, #255	; 0xff
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e008      	b.n	8003d34 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003d54:	f7fd fe9e 	bl	8001a94 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d5c:	f7fd fe9a 	bl	8001a94 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d901      	bls.n	8003d70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e007      	b.n	8003d80 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d119      	bne.n	8003dd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003da8:	f7fd fe74 	bl	8001a94 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003dae:	e009      	b.n	8003dc4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003db0:	f7fd fe70 	bl	8001a94 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dbe:	d901      	bls.n	8003dc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e007      	b.n	8003dd4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e024      	b.n	8003e3c <HAL_RTCEx_EnableBypassShadow+0x60>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	22ca      	movs	r2, #202	; 0xca
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2253      	movs	r2, #83	; 0x53
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0220 	orr.w	r2, r2, #32
 8003e20:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	22ff      	movs	r2, #255	; 0xff
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	2218      	movs	r2, #24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff8b 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003e60:	233f      	movs	r3, #63	; 0x3f
 8003e62:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003e64:	2381      	movs	r3, #129	; 0x81
 8003e66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003e68:	1dfb      	adds	r3, r7, #7
 8003e6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f932 	bl	80050e0 <hci_send_req>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da01      	bge.n	8003e86 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003e82:	23ff      	movs	r3, #255	; 0xff
 8003e84:	e000      	b.n	8003e88 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003e86:	79fb      	ldrb	r3, [r7, #7]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003e90:	b5b0      	push	{r4, r5, r7, lr}
 8003e92:	b0ce      	sub	sp, #312	; 0x138
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4605      	mov	r5, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	1dfb      	adds	r3, r7, #7
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	1cbb      	adds	r3, r7, #2
 8003eac:	4602      	mov	r2, r0
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	1dbb      	adds	r3, r7, #6
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003eb6:	f107 0310 	add.w	r3, r7, #16
 8003eba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003ebe:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	f107 0210 	add.w	r2, r7, #16
 8003ec8:	4413      	add	r3, r2
 8003eca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003ece:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003ed2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3309      	adds	r3, #9
 8003eda:	f107 0210 	add.w	r2, r7, #16
 8003ede:	4413      	add	r3, r2
 8003ee0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003ee4:	f107 030f 	add.w	r3, r7, #15
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003ef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ef6:	1dfa      	adds	r2, r7, #7
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f00:	3301      	adds	r3, #1
 8003f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f0a:	1d3a      	adds	r2, r7, #4
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f16:	3302      	adds	r3, #2
 8003f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f20:	1cba      	adds	r2, r7, #2
 8003f22:	8812      	ldrh	r2, [r2, #0]
 8003f24:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003f32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f36:	1dba      	adds	r2, r7, #6
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f4a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003f4e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003f5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f5e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003f62:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f72:	3308      	adds	r3, #8
 8003f74:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003f78:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 feea 	bl	8004d56 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003f82:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003f86:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f94:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003f98:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003fa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003fae:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fecf 	bl	8004d56 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003fb8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003fbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8003fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003fce:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003fd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fde:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003fe2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fe8:	3302      	adds	r3, #2
 8003fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ff2:	2218      	movs	r2, #24
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 febd 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ffc:	233f      	movs	r3, #63	; 0x3f
 8003ffe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004002:	2383      	movs	r3, #131	; 0x83
 8004004:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004018:	f107 030f 	add.w	r3, r7, #15
 800401c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004020:	2301      	movs	r3, #1
 8004022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f001 f857 	bl	80050e0 <hci_send_req>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	da01      	bge.n	800403c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004038:	23ff      	movs	r3, #255	; 0xff
 800403a:	e002      	b.n	8004042 <aci_gap_set_discoverable+0x1b2>
  return status;
 800403c:	f107 030f 	add.w	r3, r7, #15
 8004040:	781b      	ldrb	r3, [r3, #0]
}
 8004042:	4618      	mov	r0, r3
 8004044:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004048:	46bd      	mov	sp, r7
 800404a:	bdb0      	pop	{r4, r5, r7, pc}

0800404c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0cc      	sub	sp, #304	; 0x130
 8004050:	af00      	add	r7, sp, #0
 8004052:	4602      	mov	r2, r0
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004058:	f107 0310 	add.w	r3, r7, #16
 800405c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004060:	f107 030f 	add.w	r3, r7, #15
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800406e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004072:	1dfa      	adds	r2, r7, #7
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800407c:	3301      	adds	r3, #1
 800407e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004086:	2218      	movs	r2, #24
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fe73 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004090:	233f      	movs	r3, #63	; 0x3f
 8004092:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004096:	2385      	movs	r3, #133	; 0x85
 8004098:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800409c:	f107 0310 	add.w	r3, r7, #16
 80040a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80040a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80040ac:	f107 030f 	add.w	r3, r7, #15
 80040b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 f80d 	bl	80050e0 <hci_send_req>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da01      	bge.n	80040d0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80040cc:	23ff      	movs	r3, #255	; 0xff
 80040ce:	e002      	b.n	80040d6 <aci_gap_set_io_capability+0x8a>
  return status;
 80040d0:	f107 030f 	add.w	r3, r7, #15
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b0cc      	sub	sp, #304	; 0x130
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4605      	mov	r5, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	1dfb      	adds	r3, r7, #7
 80040f0:	462a      	mov	r2, r5
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	4622      	mov	r2, r4
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	1d7b      	adds	r3, r7, #5
 80040fc:	4602      	mov	r2, r0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	460a      	mov	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8004106:	f107 0310 	add.w	r3, r7, #16
 800410a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800410e:	f107 030f 	add.w	r3, r7, #15
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800411c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004120:	1dfa      	adds	r2, r7, #7
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800412a:	3301      	adds	r3, #1
 800412c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004134:	1dba      	adds	r2, r7, #6
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800413a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800413e:	3301      	adds	r3, #1
 8004140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004148:	1d7a      	adds	r2, r7, #5
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800414e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004152:	3301      	adds	r3, #1
 8004154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415c:	1d3a      	adds	r2, r7, #4
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004166:	3301      	adds	r3, #1
 8004168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800416c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004170:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004174:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800417a:	3301      	adds	r3, #1
 800417c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004184:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004188:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800418a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800418e:	3301      	adds	r3, #1
 8004190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004198:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800419c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800419e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041a2:	3301      	adds	r3, #1
 80041a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80041a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80041b0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80041b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041b8:	3304      	adds	r3, #4
 80041ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80041be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80041c6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80041c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041cc:	3301      	adds	r3, #1
 80041ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041d6:	2218      	movs	r2, #24
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fdcb 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80041e0:	233f      	movs	r3, #63	; 0x3f
 80041e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80041e6:	2386      	movs	r3, #134	; 0x86
 80041e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80041f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80041fc:	f107 030f 	add.w	r3, r7, #15
 8004200:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004204:	2301      	movs	r3, #1
 8004206:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800420a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 ff65 	bl	80050e0 <hci_send_req>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	da01      	bge.n	8004220 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800421c:	23ff      	movs	r3, #255	; 0xff
 800421e:	e002      	b.n	8004226 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8004220:	f107 030f 	add.w	r3, r7, #15
 8004224:	781b      	ldrb	r3, [r3, #0]
}
 8004226:	4618      	mov	r0, r3
 8004228:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800422c:	46bd      	mov	sp, r7
 800422e:	bdb0      	pop	{r4, r5, r7, pc}

08004230 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0cc      	sub	sp, #304	; 0x130
 8004234:	af00      	add	r7, sp, #0
 8004236:	4602      	mov	r2, r0
 8004238:	463b      	mov	r3, r7
 800423a:	6019      	str	r1, [r3, #0]
 800423c:	1dbb      	adds	r3, r7, #6
 800423e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004240:	f107 0310 	add.w	r3, r7, #16
 8004244:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004248:	f107 030f 	add.w	r3, r7, #15
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425a:	1dba      	adds	r2, r7, #6
 800425c:	8812      	ldrh	r2, [r2, #0]
 800425e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004260:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004264:	3302      	adds	r3, #2
 8004266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800426a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800426e:	463a      	mov	r2, r7
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8004276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800427a:	3304      	adds	r3, #4
 800427c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004280:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004284:	2218      	movs	r2, #24
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fd74 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 800428e:	233f      	movs	r3, #63	; 0x3f
 8004290:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8004294:	2388      	movs	r3, #136	; 0x88
 8004296:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80042a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80042aa:	f107 030f 	add.w	r3, r7, #15
 80042ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 ff0e 	bl	80050e0 <hci_send_req>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da01      	bge.n	80042ce <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 80042ca:	23ff      	movs	r3, #255	; 0xff
 80042cc:	e002      	b.n	80042d4 <aci_gap_pass_key_resp+0xa4>
  return status;
 80042ce:	f107 030f 	add.w	r3, r7, #15
 80042d2:	781b      	ldrb	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80042de:	b590      	push	{r4, r7, lr}
 80042e0:	b0cd      	sub	sp, #308	; 0x134
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4604      	mov	r4, r0
 80042e6:	4608      	mov	r0, r1
 80042e8:	4611      	mov	r1, r2
 80042ea:	463a      	mov	r2, r7
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	4622      	mov	r2, r4
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	1dbb      	adds	r3, r7, #6
 80042f6:	4602      	mov	r2, r0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	1d7b      	adds	r3, r7, #5
 80042fc:	460a      	mov	r2, r1
 80042fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004300:	f107 0310 	add.w	r3, r7, #16
 8004304:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	2207      	movs	r2, #7
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd30 	bl	8004d76 <Osal_MemSet>
  int index_input = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800431c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004320:	1dfa      	adds	r2, r7, #7
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800432a:	3301      	adds	r3, #1
 800432c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004334:	1dba      	adds	r2, r7, #6
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800433a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800433e:	3301      	adds	r3, #1
 8004340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004348:	1d7a      	adds	r2, r7, #5
 800434a:	7812      	ldrb	r2, [r2, #0]
 800434c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800434e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004352:	3301      	adds	r3, #1
 8004354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004358:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800435c:	2218      	movs	r2, #24
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fd08 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004366:	233f      	movs	r3, #63	; 0x3f
 8004368:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800436c:	238a      	movs	r3, #138	; 0x8a
 800436e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800437a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800438a:	2307      	movs	r3, #7
 800438c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004390:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fea2 	bl	80050e0 <hci_send_req>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da01      	bge.n	80043a6 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80043a2:	23ff      	movs	r3, #255	; 0xff
 80043a4:	e021      	b.n	80043ea <aci_gap_init+0x10c>
  if ( resp.Status )
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <aci_gap_init+0xda>
    return resp.Status;
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	e018      	b.n	80043ea <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80043c8:	f107 0308 	add.w	r3, r7, #8
 80043cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80043d6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80043d8:	f107 0308 	add.w	r3, r7, #8
 80043dc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd90      	pop	{r4, r7, pc}

080043f4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0cc      	sub	sp, #304	; 0x130
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4602      	mov	r2, r0
 80043fc:	463b      	mov	r3, r7
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800440c:	f107 030f 	add.w	r3, r7, #15
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800441a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800441e:	1dfa      	adds	r2, r7, #7
 8004420:	7812      	ldrb	r2, [r2, #0]
 8004422:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004428:	3301      	adds	r3, #1
 800442a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800442e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004432:	1c58      	adds	r0, r3, #1
 8004434:	1dfb      	adds	r3, r7, #7
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	463b      	mov	r3, r7
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	f000 fc8b 	bl	8004d56 <Osal_MemCpy>
  index_input += AdvDataLen;
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004448:	4413      	add	r3, r2
 800444a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800444e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004452:	2218      	movs	r2, #24
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc8d 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 800445c:	233f      	movs	r3, #63	; 0x3f
 800445e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004462:	238e      	movs	r3, #142	; 0x8e
 8004464:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004474:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004478:	f107 030f 	add.w	r3, r7, #15
 800447c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004480:	2301      	movs	r3, #1
 8004482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe27 	bl	80050e0 <hci_send_req>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	da01      	bge.n	800449c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8004498:	23ff      	movs	r3, #255	; 0xff
 800449a:	e002      	b.n	80044a2 <aci_gap_update_adv_data+0xae>
  return status;
 800449c:	f107 030f 	add.w	r3, r7, #15
 80044a0:	781b      	ldrb	r3, [r3, #0]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	2218      	movs	r2, #24
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fc59 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80044c4:	233f      	movs	r3, #63	; 0x3f
 80044c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80044c8:	2392      	movs	r3, #146	; 0x92
 80044ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80044d0:	2301      	movs	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044d4:	f107 0308 	add.w	r3, r7, #8
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe00 	bl	80050e0 <hci_send_req>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da01      	bge.n	80044ea <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80044e6:	23ff      	movs	r3, #255	; 0xff
 80044e8:	e000      	b.n	80044ec <aci_gap_configure_whitelist+0x40>
  return status;
 80044ea:	79fb      	ldrb	r3, [r7, #7]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0cc      	sub	sp, #304	; 0x130
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4602      	mov	r2, r0
 80044fc:	1dbb      	adds	r3, r7, #6
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	1d7b      	adds	r3, r7, #5
 8004502:	460a      	mov	r2, r1
 8004504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8004506:	f107 0310 	add.w	r3, r7, #16
 800450a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800450e:	f107 030f 	add.w	r3, r7, #15
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800451c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004520:	1dba      	adds	r2, r7, #6
 8004522:	8812      	ldrh	r2, [r2, #0]
 8004524:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800452a:	3302      	adds	r3, #2
 800452c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8004530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004534:	1d7a      	adds	r2, r7, #5
 8004536:	7812      	ldrb	r2, [r2, #0]
 8004538:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800453a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800453e:	3301      	adds	r3, #1
 8004540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004548:	2218      	movs	r2, #24
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fc12 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004552:	233f      	movs	r3, #63	; 0x3f
 8004554:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8004558:	23a5      	movs	r3, #165	; 0xa5
 800455a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800456a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800456e:	f107 030f 	add.w	r3, r7, #15
 8004572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800457c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fdac 	bl	80050e0 <hci_send_req>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	da01      	bge.n	8004592 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800458e:	23ff      	movs	r3, #255	; 0xff
 8004590:	e002      	b.n	8004598 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8004592:	f107 030f 	add.w	r3, r7, #15
 8004596:	781b      	ldrb	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	2218      	movs	r2, #24
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fbde 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045ba:	233f      	movs	r3, #63	; 0x3f
 80045bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80045be:	f240 1301 	movw	r3, #257	; 0x101
 80045c2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80045c4:	1dfb      	adds	r3, r7, #7
 80045c6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd84 	bl	80050e0 <hci_send_req>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da01      	bge.n	80045e2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80045de:	23ff      	movs	r3, #255	; 0xff
 80045e0:	e000      	b.n	80045e4 <aci_gatt_init+0x42>
  return status;
 80045e2:	79fb      	ldrb	r3, [r7, #7]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b0cf      	sub	sp, #316	; 0x13c
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4638      	mov	r0, r7
 80045f6:	6001      	str	r1, [r0, #0]
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	4622      	mov	r2, r4
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	4602      	mov	r2, r0
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	1d7b      	adds	r3, r7, #5
 800460a:	460a      	mov	r2, r1
 800460c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800460e:	f107 0310 	add.w	r3, r7, #16
 8004612:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d007      	beq.n	800462e <aci_gatt_add_service+0x42>
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d101      	bne.n	800462a <aci_gatt_add_service+0x3e>
 8004626:	2311      	movs	r3, #17
 8004628:	e002      	b.n	8004630 <aci_gatt_add_service+0x44>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <aci_gatt_add_service+0x44>
 800462e:	2303      	movs	r3, #3
 8004630:	f107 0210 	add.w	r2, r7, #16
 8004634:	4413      	add	r3, r2
 8004636:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	2203      	movs	r2, #3
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb97 	bl	8004d76 <Osal_MemSet>
  int index_input = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800464e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004652:	1dfa      	adds	r2, r7, #7
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800465c:	3301      	adds	r3, #1
 800465e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <aci_gatt_add_service+0x84>
 800466a:	2b02      	cmp	r3, #2
 800466c:	d004      	beq.n	8004678 <aci_gatt_add_service+0x8c>
 800466e:	e007      	b.n	8004680 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004676:	e005      	b.n	8004684 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800467e:	e001      	b.n	8004684 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004680:	2347      	movs	r3, #71	; 0x47
 8004682:	e05d      	b.n	8004740 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004684:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004688:	1c58      	adds	r0, r3, #1
 800468a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800468e:	463b      	mov	r3, r7
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	f000 fb60 	bl	8004d56 <Osal_MemCpy>
    index_input += size;
 8004696:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800469a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800469e:	4413      	add	r3, r2
 80046a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80046a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a8:	1dba      	adds	r2, r7, #6
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80046ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046b2:	3301      	adds	r3, #1
 80046b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80046b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046bc:	1d7a      	adds	r2, r7, #5
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80046c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046c6:	3301      	adds	r3, #1
 80046c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046d0:	2218      	movs	r2, #24
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fb4e 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046da:	233f      	movs	r3, #63	; 0x3f
 80046dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80046e0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80046e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80046f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004700:	2303      	movs	r3, #3
 8004702:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fce7 	bl	80050e0 <hci_send_req>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	da01      	bge.n	800471c <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8004718:	23ff      	movs	r3, #255	; 0xff
 800471a:	e011      	b.n	8004740 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <aci_gatt_add_service+0x142>
    return resp.Status;
 8004726:	f107 030c 	add.w	r3, r7, #12
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	e008      	b.n	8004740 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800473c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}

0800474a <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800474a:	b590      	push	{r4, r7, lr}
 800474c:	b0d1      	sub	sp, #324	; 0x144
 800474e:	af00      	add	r7, sp, #0
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	f107 0108 	add.w	r1, r7, #8
 8004758:	600a      	str	r2, [r1, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	f107 030e 	add.w	r3, r7, #14
 8004760:	4622      	mov	r2, r4
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	f107 030d 	add.w	r3, r7, #13
 8004768:	4602      	mov	r2, r0
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	1dbb      	adds	r3, r7, #6
 800476e:	460a      	mov	r2, r1
 8004770:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004772:	f107 0318 	add.w	r3, r7, #24
 8004776:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800477a:	f107 030d 	add.w	r3, r7, #13
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d008      	beq.n	8004796 <aci_gatt_add_char+0x4c>
 8004784:	f107 030d 	add.w	r3, r7, #13
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d101      	bne.n	8004792 <aci_gatt_add_char+0x48>
 800478e:	2313      	movs	r3, #19
 8004790:	e002      	b.n	8004798 <aci_gatt_add_char+0x4e>
 8004792:	2303      	movs	r3, #3
 8004794:	e000      	b.n	8004798 <aci_gatt_add_char+0x4e>
 8004796:	2305      	movs	r3, #5
 8004798:	f107 0218 	add.w	r2, r7, #24
 800479c:	4413      	add	r3, r2
 800479e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	2203      	movs	r2, #3
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fae3 	bl	8004d76 <Osal_MemSet>
  int index_input = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80047b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047ba:	f107 020e 	add.w	r2, r7, #14
 80047be:	8812      	ldrh	r2, [r2, #0]
 80047c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80047c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047c6:	3302      	adds	r3, #2
 80047c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80047cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047d0:	f107 020d 	add.w	r2, r7, #13
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80047d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047dc:	3301      	adds	r3, #1
 80047de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80047e2:	f107 030d 	add.w	r3, r7, #13
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d002      	beq.n	80047f2 <aci_gatt_add_char+0xa8>
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d004      	beq.n	80047fa <aci_gatt_add_char+0xb0>
 80047f0:	e007      	b.n	8004802 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80047f2:	2302      	movs	r3, #2
 80047f4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80047f8:	e005      	b.n	8004806 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80047fa:	2310      	movs	r3, #16
 80047fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004800:	e001      	b.n	8004806 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8004802:	2347      	movs	r3, #71	; 0x47
 8004804:	e086      	b.n	8004914 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004806:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800480a:	1cd8      	adds	r0, r3, #3
 800480c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	f000 fa9e 	bl	8004d56 <Osal_MemCpy>
    index_input += size;
 800481a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800481e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004822:	4413      	add	r3, r2
 8004824:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004828:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800482c:	1dba      	adds	r2, r7, #6
 800482e:	8812      	ldrh	r2, [r2, #0]
 8004830:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004832:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004836:	3302      	adds	r3, #2
 8004838:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800483c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004840:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004844:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004846:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800484a:	3301      	adds	r3, #1
 800484c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004854:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004858:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800485a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800485e:	3301      	adds	r3, #1
 8004860:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004868:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800486c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800486e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004872:	3301      	adds	r3, #1
 8004874:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004878:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800487c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004880:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004886:	3301      	adds	r3, #1
 8004888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800488c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004890:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004894:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004896:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800489a:	3301      	adds	r3, #1
 800489c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048a4:	2218      	movs	r2, #24
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fa64 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048ae:	233f      	movs	r3, #63	; 0x3f
 80048b0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80048b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80048b8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80048bc:	f107 0318 	add.w	r3, r7, #24
 80048c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80048c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80048d4:	2303      	movs	r3, #3
 80048d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fbfd 	bl	80050e0 <hci_send_req>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da01      	bge.n	80048f0 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80048ec:	23ff      	movs	r3, #255	; 0xff
 80048ee:	e011      	b.n	8004914 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	e008      	b.n	8004914 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8004902:	f107 0314 	add.w	r3, r7, #20
 8004906:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800490a:	b29a      	uxth	r2, r3
 800490c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004910:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800491a:	46bd      	mov	sp, r7
 800491c:	bd90      	pop	{r4, r7, pc}

0800491e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800491e:	b5b0      	push	{r4, r5, r7, lr}
 8004920:	b0cc      	sub	sp, #304	; 0x130
 8004922:	af00      	add	r7, sp, #0
 8004924:	4605      	mov	r5, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	1dbb      	adds	r3, r7, #6
 800492e:	462a      	mov	r2, r5
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	4622      	mov	r2, r4
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	1cfb      	adds	r3, r7, #3
 800493a:	4602      	mov	r2, r0
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	1cbb      	adds	r3, r7, #2
 8004940:	460a      	mov	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004944:	f107 0310 	add.w	r3, r7, #16
 8004948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800494c:	f107 030f 	add.w	r3, r7, #15
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800495a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495e:	1dba      	adds	r2, r7, #6
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004968:	3302      	adds	r3, #2
 800496a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800496e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004972:	1d3a      	adds	r2, r7, #4
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800497c:	3302      	adds	r3, #2
 800497e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004986:	1cfa      	adds	r2, r7, #3
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800498c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004990:	3301      	adds	r3, #1
 8004992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499a:	1cba      	adds	r2, r7, #2
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80049a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049a4:	3301      	adds	r3, #1
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80049aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ae:	1d98      	adds	r0, r3, #6
 80049b0:	1cbb      	adds	r3, r7, #2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80049ba:	f000 f9cc 	bl	8004d56 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80049be:	1cbb      	adds	r3, r7, #2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80049c6:	4413      	add	r3, r2
 80049c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80049cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049d0:	2218      	movs	r2, #24
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f9ce 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049da:	233f      	movs	r3, #63	; 0x3f
 80049dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80049e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80049e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80049e8:	f107 0310 	add.w	r3, r7, #16
 80049ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80049f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80049f8:	f107 030f 	add.w	r3, r7, #15
 80049fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fb67 	bl	80050e0 <hci_send_req>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da01      	bge.n	8004a1c <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8004a18:	23ff      	movs	r3, #255	; 0xff
 8004a1a:	e002      	b.n	8004a22 <aci_gatt_update_char_value+0x104>
  return status;
 8004a1c:	f107 030f 	add.w	r3, r7, #15
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdb0      	pop	{r4, r5, r7, pc}

08004a2c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b0cc      	sub	sp, #304	; 0x130
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	463b      	mov	r3, r7
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	4602      	mov	r2, r0
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	1dbb      	adds	r3, r7, #6
 8004a3e:	460a      	mov	r2, r1
 8004a40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004a42:	f107 0310 	add.w	r3, r7, #16
 8004a46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004a4a:	f107 030f 	add.w	r3, r7, #15
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	1dfa      	adds	r2, r7, #7
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a66:	3301      	adds	r3, #1
 8004a68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a70:	1dba      	adds	r2, r7, #6
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a84:	1c98      	adds	r0, r3, #2
 8004a86:	1dbb      	adds	r3, r7, #6
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	f000 f962 	bl	8004d56 <Osal_MemCpy>
  index_input += Length;
 8004a92:	1dbb      	adds	r3, r7, #6
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aa4:	2218      	movs	r2, #24
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f964 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004aae:	233f      	movs	r3, #63	; 0x3f
 8004ab0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004aba:	f107 0310 	add.w	r3, r7, #16
 8004abe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004aca:	f107 030f 	add.w	r3, r7, #15
 8004ace:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fafe 	bl	80050e0 <hci_send_req>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da01      	bge.n	8004aee <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8004aea:	23ff      	movs	r3, #255	; 0xff
 8004aec:	e002      	b.n	8004af4 <aci_hal_write_config_data+0xc8>
  return status;
 8004aee:	f107 030f 	add.w	r3, r7, #15
 8004af2:	781b      	ldrb	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b0cc      	sub	sp, #304	; 0x130
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4602      	mov	r2, r0
 8004b06:	1dfb      	adds	r3, r7, #7
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	1dbb      	adds	r3, r7, #6
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004b18:	f107 030f 	add.w	r3, r7, #15
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2a:	1dfa      	adds	r2, r7, #7
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b34:	3301      	adds	r3, #1
 8004b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3e:	1dba      	adds	r2, r7, #6
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b52:	2218      	movs	r2, #24
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f90d 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b5c:	233f      	movs	r3, #63	; 0x3f
 8004b5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004b62:	230f      	movs	r3, #15
 8004b64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004b78:	f107 030f 	add.w	r3, r7, #15
 8004b7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 faa7 	bl	80050e0 <hci_send_req>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da01      	bge.n	8004b9c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004b98:	23ff      	movs	r3, #255	; 0xff
 8004b9a:	e002      	b.n	8004ba2 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004b9c:	f107 030f 	add.w	r3, r7, #15
 8004ba0:	781b      	ldrb	r3, [r3, #0]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b0cc      	sub	sp, #304	; 0x130
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	1dbb      	adds	r3, r7, #6
 8004bb6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004bb8:	f107 0310 	add.w	r3, r7, #16
 8004bbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004bc0:	f107 030f 	add.w	r3, r7, #15
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd2:	1dba      	adds	r2, r7, #6
 8004bd4:	8812      	ldrh	r2, [r2, #0]
 8004bd6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bdc:	3302      	adds	r3, #2
 8004bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004be6:	2218      	movs	r2, #24
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f8c3 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bf0:	233f      	movs	r3, #63	; 0x3f
 8004bf2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004bf6:	2318      	movs	r3, #24
 8004bf8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004c0c:	f107 030f 	add.w	r3, r7, #15
 8004c10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa5d 	bl	80050e0 <hci_send_req>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da01      	bge.n	8004c30 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8004c2c:	23ff      	movs	r3, #255	; 0xff
 8004c2e:	e002      	b.n	8004c36 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8004c30:	f107 030f 	add.w	r3, r7, #15
 8004c34:	781b      	ldrb	r3, [r3, #0]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	2218      	movs	r2, #24
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f88f 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x03;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004c60:	1dfb      	adds	r3, r7, #7
 8004c62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fa36 	bl	80050e0 <hci_send_req>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da01      	bge.n	8004c7e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004c7a:	23ff      	movs	r3, #255	; 0xff
 8004c7c:	e000      	b.n	8004c80 <hci_reset+0x40>
  return status;
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b0cd      	sub	sp, #308	; 0x134
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	4622      	mov	r2, r4
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	1dbb      	adds	r3, r7, #6
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	1d7b      	adds	r3, r7, #5
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004ca6:	f107 0310 	add.w	r3, r7, #16
 8004caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004cae:	f107 030f 	add.w	r3, r7, #15
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	1dfa      	adds	r2, r7, #7
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	1dba      	adds	r2, r7, #6
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce8:	1d7a      	adds	r2, r7, #5
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cfc:	2218      	movs	r2, #24
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f838 	bl	8004d76 <Osal_MemSet>
  rq.ogf = 0x08;
 8004d06:	2308      	movs	r3, #8
 8004d08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004d0c:	2331      	movs	r3, #49	; 0x31
 8004d0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d22:	f107 030f 	add.w	r3, r7, #15
 8004d26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f9d2 	bl	80050e0 <hci_send_req>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da01      	bge.n	8004d46 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004d42:	23ff      	movs	r3, #255	; 0xff
 8004d44:	e002      	b.n	8004d4c <hci_le_set_default_phy+0xc4>
  return status;
 8004d46:	f107 030f 	add.w	r3, r7, #15
 8004d4a:	781b      	ldrb	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}

08004d56 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f001 ffe8 	bl	8006d3c <memcpy>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 ffe3 	bl	8006d52 <memset>
 8004d8c:	4603      	mov	r3, r0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return;
 8004d9a:	bf00      	nop
}
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return;
 8004da8:	bf00      	nop
}
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <DIS_Init>:
__weak void DIS_Init( void )
{
 8004db2:	b480      	push	{r7}
 8004db4:	af00      	add	r7, sp, #0
  return;
 8004db6:	bf00      	nop
}
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return;
 8004dc4:	bf00      	nop
}
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  return;
 8004dd2:	bf00      	nop
}
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HRS_Init>:
__weak void HRS_Init( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return;
 8004de0:	bf00      	nop
}
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HTS_Init>:
__weak void HTS_Init( void )
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0
  return;
 8004dee:	bf00      	nop
}
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <IAS_Init>:
__weak void IAS_Init( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return;
 8004dfc:	bf00      	nop
}
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LLS_Init>:
__weak void LLS_Init( void )
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  return;
 8004e0a:	bf00      	nop
}
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TPS_Init>:
__weak void TPS_Init( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return;
 8004e18:	bf00      	nop
}
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0
  return;
 8004e26:	bf00      	nop
}
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return;
 8004e34:	bf00      	nop
}
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8004e3e:	b480      	push	{r7}
 8004e40:	af00      	add	r7, sp, #0
  return;
 8004e42:	bf00      	nop
}
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <MESH_Init>:
__weak void MESH_Init( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return;
 8004e50:	bf00      	nop
}
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0
  return;
 8004e5e:	bf00      	nop
}
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <SVCCTL_Init+0x18>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <SVCCTL_Init+0x1c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004e78:	f000 f806 	bl	8004e88 <SVCCTL_SvcInit>

  return;
 8004e7c:	bf00      	nop
}
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200000c8 	.word	0x200000c8
 8004e84:	200000e8 	.word	0x200000e8

08004e88 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  BLS_Init();
 8004e8c:	f7ff ff83 	bl	8004d96 <BLS_Init>

  CRS_STM_Init();
 8004e90:	f7ff ff88 	bl	8004da4 <CRS_STM_Init>

  DIS_Init();
 8004e94:	f7ff ff8d 	bl	8004db2 <DIS_Init>

  EDS_STM_Init();
 8004e98:	f7ff ff92 	bl	8004dc0 <EDS_STM_Init>

  HIDS_Init();
 8004e9c:	f7ff ff97 	bl	8004dce <HIDS_Init>

  HRS_Init();
 8004ea0:	f7ff ff9c 	bl	8004ddc <HRS_Init>

  HTS_Init();
 8004ea4:	f7ff ffa1 	bl	8004dea <HTS_Init>

  IAS_Init();
 8004ea8:	f7ff ffa6 	bl	8004df8 <IAS_Init>

  LLS_Init();
 8004eac:	f7ff ffab 	bl	8004e06 <LLS_Init>

  TPS_Init();
 8004eb0:	f7ff ffb0 	bl	8004e14 <TPS_Init>

  MOTENV_STM_Init();
 8004eb4:	f7ff ffb5 	bl	8004e22 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004eb8:	f7ff ffba 	bl	8004e30 <P2PS_STM_Init>

  OTAS_STM_Init();
 8004ebc:	f7ff ffbf 	bl	8004e3e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004ec0:	f7ff ffcb 	bl	8004e5a <BVOPUS_STM_Init>

  MESH_Init();
 8004ec4:	f7ff ffc2 	bl	8004e4c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004ec8:	f001 f9ac 	bl	8006224 <SVCCTL_InitCustomSvc>
  
  return;
 8004ecc:	bf00      	nop
}
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <SVCCTL_RegisterSvcHandler+0x30>)
 8004eda:	7f1b      	ldrb	r3, [r3, #28]
 8004edc:	4619      	mov	r1, r3
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <SVCCTL_RegisterSvcHandler+0x30>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <SVCCTL_RegisterSvcHandler+0x30>)
 8004ee8:	7f1b      	ldrb	r3, [r3, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <SVCCTL_RegisterSvcHandler+0x30>)
 8004ef0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004ef2:	bf00      	nop
}
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	200000c8 	.word	0x200000c8

08004f04 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2bff      	cmp	r3, #255	; 0xff
 8004f1c:	d000      	beq.n	8004f20 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004f1e:	e025      	b.n	8004f6c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3302      	adds	r3, #2
 8004f24:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f34:	d000      	beq.n	8004f38 <SVCCTL_UserEvtRx+0x34>
          break;
 8004f36:	e018      	b.n	8004f6a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	757b      	strb	r3, [r7, #21]
 8004f3c:	e00d      	b.n	8004f5a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004f3e:	7d7b      	ldrb	r3, [r7, #21]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <SVCCTL_UserEvtRx+0xa0>)
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004f54:	7d7b      	ldrb	r3, [r7, #21]
 8004f56:	3301      	adds	r3, #1
 8004f58:	757b      	strb	r3, [r7, #21]
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <SVCCTL_UserEvtRx+0xa0>)
 8004f5c:	7f1b      	ldrb	r3, [r3, #28]
 8004f5e:	7d7a      	ldrb	r2, [r7, #21]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3ec      	bcc.n	8004f3e <SVCCTL_UserEvtRx+0x3a>
          break;
 8004f64:	e000      	b.n	8004f68 <SVCCTL_UserEvtRx+0x64>
              break;
 8004f66:	bf00      	nop
          break;
 8004f68:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004f6a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d009      	beq.n	8004f86 <SVCCTL_UserEvtRx+0x82>
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d00a      	beq.n	8004f8c <SVCCTL_UserEvtRx+0x88>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fea0 	bl	8005cc0 <SVCCTL_App_Notification>
 8004f80:	4603      	mov	r3, r0
 8004f82:	75bb      	strb	r3, [r7, #22]
      break;
 8004f84:	e008      	b.n	8004f98 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75bb      	strb	r3, [r7, #22]
      break;
 8004f8a:	e005      	b.n	8004f98 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75bb      	strb	r3, [r7, #22]
      break;
 8004f90:	e002      	b.n	8004f98 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75bb      	strb	r3, [r7, #22]
      break;
 8004f96:	bf00      	nop
  }

  return (return_status);
 8004f98:	7dbb      	ldrb	r3, [r7, #22]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	200000c8 	.word	0x200000c8

08004fa8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004fb0:	f107 030c 	add.w	r3, r7, #12
 8004fb4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2121      	movs	r1, #33	; 0x21
 8004fc0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004fc4:	f000 fa5e 	bl	8005484 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	330b      	adds	r3, #11
 8004fcc:	78db      	ldrb	r3, [r3, #3]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b088      	sub	sp, #32
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	210f      	movs	r1, #15
 8004fee:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004ff2:	f000 fa47 	bl	8005484 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	330b      	adds	r3, #11
 8004ffa:	78db      	ldrb	r3, [r3, #3]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <hci_init+0x30>)
 8005014:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <hci_init+0x34>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800501c:	4806      	ldr	r0, [pc, #24]	; (8005038 <hci_init+0x34>)
 800501e:	f000 f9af 	bl	8005380 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f8dc 	bl	80051e4 <TlInit>

  return;
 800502c:	bf00      	nop
}
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000200 	.word	0x20000200
 8005038:	200001d8 	.word	0x200001d8

0800503c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005042:	4824      	ldr	r0, [pc, #144]	; (80050d4 <hci_user_evt_proc+0x98>)
 8005044:	f000 fd2a 	bl	8005a9c <LST_is_empty>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d12f      	bne.n	80050ae <hci_user_evt_proc+0x72>
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <hci_user_evt_proc+0x9c>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02b      	beq.n	80050ae <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	4619      	mov	r1, r3
 800505c:	481d      	ldr	r0, [pc, #116]	; (80050d4 <hci_user_evt_proc+0x98>)
 800505e:	f000 fda4 	bl	8005baa <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f97b 	bl	8005360 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <hci_user_evt_proc+0xa0>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005076:	2301      	movs	r3, #1
 8005078:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <hci_user_evt_proc+0xa0>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	1d3a      	adds	r2, r7, #4
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005084:	793a      	ldrb	r2, [r7, #4]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <hci_user_evt_proc+0x9c>)
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e002      	b.n	8005092 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <hci_user_evt_proc+0x9c>)
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <hci_user_evt_proc+0x9c>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fc41 	bl	8005924 <TL_MM_EvtDone>
 80050a2:	e004      	b.n	80050ae <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4619      	mov	r1, r3
 80050a8:	480a      	ldr	r0, [pc, #40]	; (80050d4 <hci_user_evt_proc+0x98>)
 80050aa:	f000 fd17 	bl	8005adc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80050ae:	4809      	ldr	r0, [pc, #36]	; (80050d4 <hci_user_evt_proc+0x98>)
 80050b0:	f000 fcf4 	bl	8005a9c <LST_is_empty>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d107      	bne.n	80050ca <hci_user_evt_proc+0x8e>
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <hci_user_evt_proc+0x9c>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80050c2:	4804      	ldr	r0, [pc, #16]	; (80050d4 <hci_user_evt_proc+0x98>)
 80050c4:	f001 f80c 	bl	80060e0 <hci_notify_asynch_evt>
  }


  return;
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
}
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200000f0 	.word	0x200000f0
 80050d8:	200000fc 	.word	0x200000fc
 80050dc:	200001d8 	.word	0x200001d8

080050e0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80050ec:	2000      	movs	r0, #0
 80050ee:	f000 f8d5 	bl	800529c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80050f2:	2300      	movs	r3, #0
 80050f4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	885b      	ldrh	r3, [r3, #2]
 80050fa:	b21b      	sxth	r3, r3
 80050fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005100:	b21a      	sxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	b21b      	sxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b21b      	sxth	r3, r3
 800510e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	b2d9      	uxtb	r1, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	8bbb      	ldrh	r3, [r7, #28]
 800511c:	4618      	mov	r0, r3
 800511e:	f000 f891 	bl	8005244 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8005122:	e052      	b.n	80051ca <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005124:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005128:	f000 fff1 	bl	800610e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800512c:	e047      	b.n	80051be <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	4619      	mov	r1, r3
 8005134:	482a      	ldr	r0, [pc, #168]	; (80051e0 <hci_send_req+0x100>)
 8005136:	f000 fd38 	bl	8005baa <LST_remove_head>

      OutputRspTrace(pevtpacket);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f8fb 	bl	8005338 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	7a5b      	ldrb	r3, [r3, #9]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d114      	bne.n	8005174 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	330b      	adds	r3, #11
 800514e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	885b      	ldrh	r3, [r3, #2]
 8005154:	b29b      	uxth	r3, r3
 8005156:	8bba      	ldrh	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d104      	bne.n	8005166 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d027      	beq.n	80051be <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800516e:	2301      	movs	r3, #1
 8005170:	77fb      	strb	r3, [r7, #31]
 8005172:	e024      	b.n	80051be <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	330b      	adds	r3, #11
 8005178:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005180:	b29b      	uxth	r3, r3
 8005182:	8bba      	ldrh	r2, [r7, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d114      	bne.n	80051b2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	7a9b      	ldrb	r3, [r3, #10]
 800518c:	3b03      	subs	r3, #3
 800518e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	429a      	cmp	r2, r3
 8005198:	bfa8      	it	ge
 800519a:	461a      	movge	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6918      	ldr	r0, [r3, #16]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1cd9      	adds	r1, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f001 fdc5 	bl	8006d3c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80051be:	4808      	ldr	r0, [pc, #32]	; (80051e0 <hci_send_req+0x100>)
 80051c0:	f000 fc6c 	bl	8005a9c <LST_is_empty>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0b1      	beq.n	800512e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0a9      	beq.n	8005124 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80051d0:	2001      	movs	r0, #1
 80051d2:	f000 f863 	bl	800529c <NotifyCmdStatus>

  return 0;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200001f8 	.word	0x200001f8

080051e4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80051ec:	480f      	ldr	r0, [pc, #60]	; (800522c <TlInit+0x48>)
 80051ee:	f000 fc45 	bl	8005a7c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80051f2:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <TlInit+0x4c>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80051f8:	480e      	ldr	r0, [pc, #56]	; (8005234 <TlInit+0x50>)
 80051fa:	f000 fc3f 	bl	8005a7c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <TlInit+0x54>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <TlInit+0x58>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <TlInit+0x5c>)
 8005212:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <TlInit+0x58>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f107 0208 	add.w	r2, r7, #8
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
  }

  return;
 8005220:	bf00      	nop
 8005222:	bf00      	nop
}
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200001f8 	.word	0x200001f8
 8005230:	200000f8 	.word	0x200000f8
 8005234:	200000f0 	.word	0x200000f0
 8005238:	200000fc 	.word	0x200000fc
 800523c:	200001d8 	.word	0x200001d8
 8005240:	080052dd 	.word	0x080052dd

08005244 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	603a      	str	r2, [r7, #0]
 800524e:	80fb      	strh	r3, [r7, #6]
 8005250:	460b      	mov	r3, r1
 8005252:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <SendCmd+0x50>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <SendCmd+0x50>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	797a      	ldrb	r2, [r7, #5]
 8005264:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <SendCmd+0x50>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	797a      	ldrb	r2, [r7, #5]
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fd63 	bl	8006d3c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <SendCmd+0x50>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f852 	bl	8005324 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <SendCmd+0x54>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2100      	movs	r1, #0
 8005286:	2000      	movs	r0, #0
 8005288:	4798      	blx	r3

  return;
 800528a:	bf00      	nop
}
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	200000f8 	.word	0x200000f8
 8005298:	200001d8 	.word	0x200001d8

0800529c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <NotifyCmdStatus+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <NotifyCmdStatus+0x3c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80052bc:	e008      	b.n	80052d0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <NotifyCmdStatus+0x3c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <NotifyCmdStatus+0x3c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2001      	movs	r0, #1
 80052cc:	4798      	blx	r3
  return;
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
}
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000200 	.word	0x20000200

080052dc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7a5b      	ldrb	r3, [r3, #9]
 80052e8:	2b0f      	cmp	r3, #15
 80052ea:	d003      	beq.n	80052f4 <TlEvtReceived+0x18>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7a5b      	ldrb	r3, [r3, #9]
 80052f0:	2b0e      	cmp	r3, #14
 80052f2:	d107      	bne.n	8005304 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4809      	ldr	r0, [pc, #36]	; (800531c <TlEvtReceived+0x40>)
 80052f8:	f000 fc14 	bl	8005b24 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80052fc:	2000      	movs	r0, #0
 80052fe:	f000 fefb 	bl	80060f8 <hci_cmd_resp_release>
 8005302:	e006      	b.n	8005312 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4806      	ldr	r0, [pc, #24]	; (8005320 <TlEvtReceived+0x44>)
 8005308:	f000 fc0c 	bl	8005b24 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800530c:	4804      	ldr	r0, [pc, #16]	; (8005320 <TlEvtReceived+0x44>)
 800530e:	f000 fee7 	bl	80060e0 <hci_notify_asynch_evt>
  }

  return;
 8005312:	bf00      	nop
}
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200001f8 	.word	0x200001f8
 8005320:	200000f0 	.word	0x200000f0

08005324 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800532c:	bf00      	nop
}
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7a5b      	ldrb	r3, [r3, #9]
 8005344:	2b0e      	cmp	r3, #14
 8005346:	d002      	beq.n	800534e <OutputRspTrace+0x16>
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d002      	beq.n	8005352 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 800534c:	e002      	b.n	8005354 <OutputRspTrace+0x1c>
      break;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <OutputRspTrace+0x1c>
      break;
 8005352:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8005354:	bf00      	nop
}
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7a5b      	ldrb	r3, [r3, #9]
 800536c:	2bff      	cmp	r3, #255	; 0xff
 800536e:	d100      	bne.n	8005372 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8005370:	bf00      	nop
 8005372:	bf00      	nop
}
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <hci_register_io_bus+0x20>)
 800538c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <hci_register_io_bus+0x24>)
 8005392:	611a      	str	r2, [r3, #16]

  return;
 8005394:	bf00      	nop
}
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	080056fd 	.word	0x080056fd
 80053a4:	08005765 	.word	0x08005765

080053a8 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <shci_init+0x30>)
 80053b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <shci_init+0x34>)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80053c0:	4806      	ldr	r0, [pc, #24]	; (80053dc <shci_init+0x34>)
 80053c2:	f000 f947 	bl	8005654 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f8a0 	bl	8005510 <TlInit>

  return;
 80053d0:	bf00      	nop
}
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000224 	.word	0x20000224
 80053dc:	20000204 	.word	0x20000204

080053e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80053e6:	4824      	ldr	r0, [pc, #144]	; (8005478 <shci_user_evt_proc+0x98>)
 80053e8:	f000 fb58 	bl	8005a9c <LST_is_empty>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d12f      	bne.n	8005452 <shci_user_evt_proc+0x72>
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <shci_user_evt_proc+0x9c>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02b      	beq.n	8005452 <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	4619      	mov	r1, r3
 8005400:	481d      	ldr	r0, [pc, #116]	; (8005478 <shci_user_evt_proc+0x98>)
 8005402:	f000 fbd2 	bl	8005baa <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f913 	bl	8005634 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 800540e:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <shci_user_evt_proc+0xa0>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800541a:	2301      	movs	r3, #1
 800541c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <shci_user_evt_proc+0xa0>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005428:	793a      	ldrb	r2, [r7, #4]
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <shci_user_evt_proc+0x9c>)
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e002      	b.n	8005436 <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <shci_user_evt_proc+0x9c>)
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <shci_user_evt_proc+0x9c>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fa6f 	bl	8005924 <TL_MM_EvtDone>
 8005446:	e004      	b.n	8005452 <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4619      	mov	r1, r3
 800544c:	480a      	ldr	r0, [pc, #40]	; (8005478 <shci_user_evt_proc+0x98>)
 800544e:	f000 fb45 	bl	8005adc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <shci_user_evt_proc+0x98>)
 8005454:	f000 fb22 	bl	8005a9c <LST_is_empty>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <shci_user_evt_proc+0x8e>
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <shci_user_evt_proc+0x9c>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005466:	4804      	ldr	r0, [pc, #16]	; (8005478 <shci_user_evt_proc+0x98>)
 8005468:	f7fa ff57 	bl	800031a <shci_notify_asynch_evt>
  }


  return;
 800546c:	bf00      	nop
 800546e:	bf00      	nop
}
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000108 	.word	0x20000108
 800547c:	20000118 	.word	0x20000118
 8005480:	20000204 	.word	0x20000204

08005484 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60ba      	str	r2, [r7, #8]
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	4603      	mov	r3, r0
 8005490:	81fb      	strh	r3, [r7, #14]
 8005492:	460b      	mov	r3, r1
 8005494:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005496:	2000      	movs	r0, #0
 8005498:	f000 f86c 	bl	8005574 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <shci_send+0x84>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	89fa      	ldrh	r2, [r7, #14]
 80054a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <shci_send+0x84>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	7b7a      	ldrb	r2, [r7, #13]
 80054ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <shci_send+0x84>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	7b7a      	ldrb	r2, [r7, #13]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fc3f 	bl	8006d3c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <shci_send+0x84>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f89c 	bl	8005600 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <shci_send+0x88>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2100      	movs	r1, #0
 80054ce:	2000      	movs	r0, #0
 80054d0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80054d2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80054d6:	f7fa ff37 	bl	8000348 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f103 0008 	add.w	r0, r3, #8
 80054e0:	4b09      	ldr	r3, [pc, #36]	; (8005508 <shci_send+0x84>)
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <shci_send+0x84>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	3303      	adds	r3, #3
 80054ec:	461a      	mov	r2, r3
 80054ee:	f001 fc25 	bl	8006d3c <memcpy>

  OutputRspTrace(p_rsp);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f88e 	bl	8005614 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f000 f83b 	bl	8005574 <Cmd_SetStatus>

  return;
 80054fe:	bf00      	nop
}
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000114 	.word	0x20000114
 800550c:	20000204 	.word	0x20000204

08005510 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <TlInit+0x4c>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800551e:	4810      	ldr	r0, [pc, #64]	; (8005560 <TlInit+0x50>)
 8005520:	f000 faac 	bl	8005a7c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005524:	2001      	movs	r0, #1
 8005526:	f000 f825 	bl	8005574 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <TlInit+0x54>)
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <TlInit+0x58>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <TlInit+0x5c>)
 800553e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <TlInit+0x60>)
 8005542:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <TlInit+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f107 020c 	add.w	r2, r7, #12
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
  }

  return;
 8005550:	bf00      	nop
 8005552:	bf00      	nop
}
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000114 	.word	0x20000114
 8005560:	20000108 	.word	0x20000108
 8005564:	20000118 	.word	0x20000118
 8005568:	20000204 	.word	0x20000204
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055dd 	.word	0x080055dd

08005574 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <Cmd_SetStatus+0x48>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <Cmd_SetStatus+0x48>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <Cmd_SetStatus+0x4c>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800559a:	e00b      	b.n	80055b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <Cmd_SetStatus+0x4c>)
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <Cmd_SetStatus+0x48>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <Cmd_SetStatus+0x48>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2001      	movs	r0, #1
 80055b0:	4798      	blx	r3
  return;
 80055b2:	bf00      	nop
 80055b4:	bf00      	nop
}
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000224 	.word	0x20000224
 80055c0:	20000110 	.word	0x20000110

080055c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fa feb0 	bl	8000332 <shci_cmd_resp_release>

  return;
 80055d2:	bf00      	nop
}
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <TlUserEvtReceived+0x20>)
 80055e8:	f000 fa9c 	bl	8005b24 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80055ec:	4803      	ldr	r0, [pc, #12]	; (80055fc <TlUserEvtReceived+0x20>)
 80055ee:	f7fa fe94 	bl	800031a <shci_notify_asynch_evt>

  return;
 80055f2:	bf00      	nop
}
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000108 	.word	0x20000108

08005600 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8005608:	bf00      	nop
}
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7a5b      	ldrb	r3, [r3, #9]
 8005620:	2b0e      	cmp	r3, #14
 8005622:	d000      	beq.n	8005626 <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 8005624:	e000      	b.n	8005628 <OutputRspTrace+0x14>
      break;
 8005626:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8005628:	bf00      	nop
}
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7a5b      	ldrb	r3, [r3, #9]
 8005640:	2bff      	cmp	r3, #255	; 0xff
 8005642:	d100      	bne.n	8005646 <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 8005644:	bf00      	nop
 8005646:	bf00      	nop
}
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a05      	ldr	r2, [pc, #20]	; (8005674 <shci_register_io_bus+0x20>)
 8005660:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <shci_register_io_bus+0x24>)
 8005666:	611a      	str	r2, [r3, #16]

  return;
 8005668:	bf00      	nop
}
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	080057d9 	.word	0x080057d9
 8005678:	0800582d 	.word	0x0800582d

0800567c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005680:	f001 f81c 	bl	80066bc <HW_IPCC_Enable>

  return;
 8005684:	bf00      	nop
}
 8005686:	bd80      	pop	{r7, pc}

08005688 <TL_Init>:


void TL_Init( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <TL_Init+0x48>)
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <TL_Init+0x4c>)
 8005690:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <TL_Init+0x48>)
 8005694:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <TL_Init+0x50>)
 8005696:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <TL_Init+0x48>)
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <TL_Init+0x54>)
 800569c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <TL_Init+0x48>)
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <TL_Init+0x58>)
 80056a2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <TL_Init+0x48>)
 80056a6:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <TL_Init+0x5c>)
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <TL_Init+0x48>)
 80056ac:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <TL_Init+0x60>)
 80056ae:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <TL_Init+0x48>)
 80056b2:	4a0e      	ldr	r2, [pc, #56]	; (80056ec <TL_Init+0x64>)
 80056b4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <TL_Init+0x48>)
 80056b8:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <TL_Init+0x68>)
 80056ba:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <TL_Init+0x48>)
 80056be:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <TL_Init+0x6c>)
 80056c0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80056c2:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <TL_Init+0x48>)
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <TL_Init+0x70>)
 80056c6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80056c8:	f001 f808 	bl	80066dc <HW_IPCC_Init>

  return;
 80056cc:	bf00      	nop
}
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20030000 	.word	0x20030000
 80056d4:	20030028 	.word	0x20030028
 80056d8:	20030048 	.word	0x20030048
 80056dc:	20030058 	.word	0x20030058
 80056e0:	20030064 	.word	0x20030064
 80056e4:	2003006c 	.word	0x2003006c
 80056e8:	20030074 	.word	0x20030074
 80056ec:	2003007c 	.word	0x2003007c
 80056f0:	20030098 	.word	0x20030098
 80056f4:	2003009c 	.word	0x2003009c
 80056f8:	200300a8 	.word	0x200300a8

080056fc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005708:	4811      	ldr	r0, [pc, #68]	; (8005750 <TL_BLE_Init+0x54>)
 800570a:	f000 f9b7 	bl	8005a7c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <TL_BLE_Init+0x58>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <TL_BLE_Init+0x5c>)
 8005728:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a08      	ldr	r2, [pc, #32]	; (8005750 <TL_BLE_Init+0x54>)
 800572e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005730:	f000 ffea 	bl	8006708 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a08      	ldr	r2, [pc, #32]	; (800575c <TL_BLE_Init+0x60>)
 800573a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a07      	ldr	r2, [pc, #28]	; (8005760 <TL_BLE_Init+0x64>)
 8005742:	6013      	str	r3, [r2, #0]

  return 0;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	200300c4 	.word	0x200300c4
 8005754:	20030000 	.word	0x20030000
 8005758:	20030a48 	.word	0x20030a48
 800575c:	20000230 	.word	0x20000230
 8005760:	20000234 	.word	0x20000234

08005764 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <TL_BLE_SendCmd+0x24>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800577a:	f000 ffcf 	bl	800671c <HW_IPCC_BLE_SendCmd>

  return 0;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20030000 	.word	0x20030000

0800578c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005792:	e009      	b.n	80057a8 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4808      	ldr	r0, [pc, #32]	; (80057bc <HW_IPCC_BLE_RxEvtNot+0x30>)
 800579a:	f000 fa06 	bl	8005baa <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HW_IPCC_BLE_RxEvtNot+0x34>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4610      	mov	r0, r2
 80057a6:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80057a8:	4804      	ldr	r0, [pc, #16]	; (80057bc <HW_IPCC_BLE_RxEvtNot+0x30>)
 80057aa:	f000 f977 	bl	8005a9c <LST_is_empty>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ef      	beq.n	8005794 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80057b4:	bf00      	nop
}
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	200300c4 	.word	0x200300c4
 80057c0:	20000230 	.word	0x20000230

080057c4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80057c8:	4b02      	ldr	r3, [pc, #8]	; (80057d4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4798      	blx	r3

  return;
 80057ce:	bf00      	nop
}
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000234 	.word	0x20000234

080057d8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80057e4:	480d      	ldr	r0, [pc, #52]	; (800581c <TL_SYS_Init+0x44>)
 80057e6:	f000 f949 	bl	8005a7c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <TL_SYS_Init+0x48>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a08      	ldr	r2, [pc, #32]	; (800581c <TL_SYS_Init+0x44>)
 80057fc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80057fe:	f000 ffaf 	bl	8006760 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <TL_SYS_Init+0x4c>)
 8005808:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4a06      	ldr	r2, [pc, #24]	; (8005828 <TL_SYS_Init+0x50>)
 8005810:	6013      	str	r3, [r2, #0]

  return 0;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200300cc 	.word	0x200300cc
 8005820:	20030000 	.word	0x20030000
 8005824:	20000238 	.word	0x20000238
 8005828:	2000023c 	.word	0x2000023c

0800582c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <TL_SYS_SendCmd+0x24>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8005842:	f000 ff97 	bl	8006774 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20030000 	.word	0x20030000

08005854 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800585e:	68d2      	ldr	r2, [r2, #12]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3

  return;
 8005866:	bf00      	nop
}
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000238 	.word	0x20000238
 8005870:	20030000 	.word	0x20030000

08005874 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800587a:	e009      	b.n	8005890 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4808      	ldr	r0, [pc, #32]	; (80058a4 <HW_IPCC_SYS_EvtNot+0x30>)
 8005882:	f000 f992 	bl	8005baa <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005886:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <HW_IPCC_SYS_EvtNot+0x34>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005890:	4804      	ldr	r0, [pc, #16]	; (80058a4 <HW_IPCC_SYS_EvtNot+0x30>)
 8005892:	f000 f903 	bl	8005a9c <LST_is_empty>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ef      	beq.n	800587c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800589c:	bf00      	nop
}
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	200300cc 	.word	0x200300cc
 80058a8:	2000023c 	.word	0x2000023c

080058ac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80058b4:	4817      	ldr	r0, [pc, #92]	; (8005914 <TL_MM_Init+0x68>)
 80058b6:	f000 f8e1 	bl	8005a7c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80058ba:	4817      	ldr	r0, [pc, #92]	; (8005918 <TL_MM_Init+0x6c>)
 80058bc:	f000 f8de 	bl	8005a7c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <TL_MM_Init+0x70>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TL_MM_Init+0x74>)
 80058c6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <TL_MM_Init+0x74>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
 80058d0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <TL_MM_Init+0x74>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68d2      	ldr	r2, [r2, #12]
 80058da:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <TL_MM_Init+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <TL_MM_Init+0x68>)
 80058e2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <TL_MM_Init+0x74>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <TL_MM_Init+0x74>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6852      	ldr	r2, [r2, #4]
 80058f6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <TL_MM_Init+0x74>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6912      	ldr	r2, [r2, #16]
 8005900:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <TL_MM_Init+0x74>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6952      	ldr	r2, [r2, #20]
 800590a:	619a      	str	r2, [r3, #24]

  return;
 800590c:	bf00      	nop
}
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200300b4 	.word	0x200300b4
 8005918:	20000228 	.word	0x20000228
 800591c:	20030000 	.word	0x20030000
 8005920:	20000240 	.word	0x20000240

08005924 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4806      	ldr	r0, [pc, #24]	; (8005948 <TL_MM_EvtDone+0x24>)
 8005930:	f000 f8f8 	bl	8005b24 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f82b 	bl	8005990 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800593a:	4804      	ldr	r0, [pc, #16]	; (800594c <TL_MM_EvtDone+0x28>)
 800593c:	f000 ff40 	bl	80067c0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005940:	bf00      	nop
}
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000228 	.word	0x20000228
 800594c:	08005951 	.word	0x08005951

08005950 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005956:	e00c      	b.n	8005972 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	4619      	mov	r1, r3
 800595c:	480a      	ldr	r0, [pc, #40]	; (8005988 <SendFreeBuf+0x38>)
 800595e:	f000 f924 	bl	8005baa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <SendFreeBuf+0x3c>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f000 f8d9 	bl	8005b24 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005972:	4805      	ldr	r0, [pc, #20]	; (8005988 <SendFreeBuf+0x38>)
 8005974:	f000 f892 	bl	8005a9c <LST_is_empty>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0ec      	beq.n	8005958 <SendFreeBuf+0x8>
  }

  return;
 800597e:	bf00      	nop
}
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000228 	.word	0x20000228
 800598c:	20030000 	.word	0x20030000

08005990 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7a5b      	ldrb	r3, [r3, #9]
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d004      	beq.n	80059aa <OutputMemReleaseTrace+0x1a>
 80059a0:	2bff      	cmp	r3, #255	; 0xff
 80059a2:	d004      	beq.n	80059ae <OutputMemReleaseTrace+0x1e>
 80059a4:	2b0e      	cmp	r3, #14
 80059a6:	d004      	beq.n	80059b2 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 80059a8:	e004      	b.n	80059b4 <OutputMemReleaseTrace+0x24>
      break;
 80059aa:	bf00      	nop
 80059ac:	e002      	b.n	80059b4 <OutputMemReleaseTrace+0x24>
      break;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <OutputMemReleaseTrace+0x24>
      break;
 80059b2:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 80059b4:	bf00      	nop
}
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80059c4:	4805      	ldr	r0, [pc, #20]	; (80059dc <TL_TRACES_Init+0x1c>)
 80059c6:	f000 f859 	bl	8005a7c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <TL_TRACES_Init+0x20>)
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	4a03      	ldr	r2, [pc, #12]	; (80059dc <TL_TRACES_Init+0x1c>)
 80059d0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80059d2:	f000 ff2b 	bl	800682c <HW_IPCC_TRACES_Init>

  return;
 80059d6:	bf00      	nop
}
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200300bc 	.word	0x200300bc
 80059e0:	20030000 	.word	0x20030000

080059e4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80059ea:	e008      	b.n	80059fe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	4619      	mov	r1, r3
 80059f0:	4808      	ldr	r0, [pc, #32]	; (8005a14 <HW_IPCC_TRACES_EvtNot+0x30>)
 80059f2:	f000 f8da 	bl	8005baa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f80d 	bl	8005a18 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80059fe:	4805      	ldr	r0, [pc, #20]	; (8005a14 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005a00:	f000 f84c 	bl	8005a9c <LST_is_empty>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005a0a:	bf00      	nop
}
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200300bc 	.word	0x200300bc

08005a18 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <OTP_Read+0x48>)
 8005a38:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a3a:	e002      	b.n	8005a42 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b08      	subs	r3, #8
 8005a40:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3307      	adds	r3, #7
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	79fa      	ldrb	r2, [r7, #7]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d003      	beq.n	8005a56 <OTP_Read+0x2a>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <OTP_Read+0x4c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d1f2      	bne.n	8005a3c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	79fa      	ldrb	r2, [r7, #7]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d001      	beq.n	8005a66 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	1fff73f8 	.word	0x1fff73f8
 8005a78:	1fff7000 	.word	0x1fff7000

08005a7c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005aae:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d102      	bne.n	8005ac0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
 8005abe:	e001      	b.n	8005ac4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75fb      	strb	r3, [r7, #23]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005af0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b38:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b74:	f3ef 8310 	mrs	r3, PRIMASK
 8005b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b7e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bbe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff ffcd 	bl	8005b6c <LST_remove_node>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005bdc:	bf00      	nop
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <LL_FLASH_GetUDN+0x14>)
 8005bea:	681b      	ldr	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	1fff7580 	.word	0x1fff7580

08005bfc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <LL_FLASH_GetDeviceID+0x14>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	1fff7584 	.word	0x1fff7584

08005c14 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <LL_FLASH_GetSTCompanyID+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	1fff7584 	.word	0x1fff7584

08005c2c <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8005c2c:	b5b0      	push	{r4, r5, r7, lr}
 8005c2e:	b08c      	sub	sp, #48	; 0x30
 8005c30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8005c32:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <APP_BLE_Init+0x84>)
 8005c34:	463c      	mov	r4, r7
 8005c36:	461d      	mov	r5, r3
 8005c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c44:	c407      	stmia	r4!, {r0, r1, r2}
 8005c46:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8005c48:	f000 f8e6 	bl	8005e18 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	2002      	movs	r0, #2
 8005c50:	f000 fe14 	bl	800687c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005c54:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <APP_BLE_Init+0x88>)
 8005c56:	2100      	movs	r1, #0
 8005c58:	2004      	movs	r0, #4
 8005c5a:	f000 ff1d 	bl	8006a98 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8005c5e:	463b      	mov	r3, r7
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9a1 	bl	8004fa8 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005c66:	f000 f8ed 	bl	8005e44 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005c6a:	f7ff f8fd 	bl	8004e68 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <APP_BLE_Init+0x8c>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <APP_BLE_Init+0x8c>)
 8005c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c7c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005c7e:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <APP_BLE_Init+0x90>)
 8005c80:	2100      	movs	r1, #0
 8005c82:	2001      	movs	r0, #1
 8005c84:	f000 ff08 	bl	8006a98 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005c88:	2006      	movs	r0, #6
 8005c8a:	f7fe ff8f 	bl	8004bac <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8005c8e:	f000 fa94 	bl	80061ba <Custom_APP_Init>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <APP_BLE_Init+0x8c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <APP_BLE_Init+0x8c>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f000 f98e 	bl	8005fc4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8005ca8:	bf00      	nop
}
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bdb0      	pop	{r4, r5, r7, pc}
 8005cb0:	08006dc4 	.word	0x08006dc4
 8005cb4:	0800503d 	.word	0x0800503d
 8005cb8:	2000011c 	.word	0x2000011c
 8005cbc:	080060ad 	.word	0x080060ad

08005cc0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd4:	d024      	beq.n	8005d20 <SVCCTL_App_Notification+0x60>
 8005cd6:	2bff      	cmp	r3, #255	; 0xff
 8005cd8:	d050      	beq.n	8005d7c <SVCCTL_App_Notification+0xbc>
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d000      	beq.n	8005ce0 <SVCCTL_App_Notification+0x20>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8005cde:	e08f      	b.n	8005e00 <SVCCTL_App_Notification+0x140>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	4b47      	ldr	r3, [pc, #284]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d106      	bne.n	8005d04 <SVCCTL_App_Notification+0x44>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005cfc:	4b43      	ldr	r3, [pc, #268]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8005d04:	2001      	movs	r0, #1
 8005d06:	f000 f95d 	bl	8005fc4 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005d10:	4b3e      	ldr	r3, [pc, #248]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d12:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005d14:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d16:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8005d18:	483d      	ldr	r0, [pc, #244]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d1a:	f000 fa3a 	bl	8006192 <Custom_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8005d1e:	e06f      	b.n	8005e00 <SVCCTL_App_Notification+0x140>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	3302      	adds	r3, #2
 8005d24:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d002      	beq.n	8005d34 <SVCCTL_App_Notification+0x74>
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d022      	beq.n	8005d78 <SVCCTL_App_Notification+0xb8>
          break;
 8005d32:	e022      	b.n	8005d7a <SVCCTL_App_Notification+0xba>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005d3a:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d3c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d104      	bne.n	8005d4e <SVCCTL_App_Notification+0x8e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8005d44:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d46:	2206      	movs	r2, #6
 8005d48:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8005d4c:	e003      	b.n	8005d56 <SVCCTL_App_Notification+0x96>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d50:	2205      	movs	r2, #5
 8005d52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d60:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8005d62:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005d68:	4b28      	ldr	r3, [pc, #160]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005d6a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d6e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8005d70:	4827      	ldr	r0, [pc, #156]	; (8005e10 <SVCCTL_App_Notification+0x150>)
 8005d72:	f000 fa0e 	bl	8006192 <Custom_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8005d76:	e000      	b.n	8005d7a <SVCCTL_App_Notification+0xba>
          break;
 8005d78:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8005d7a:	e041      	b.n	8005e00 <SVCCTL_App_Notification+0x140>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3302      	adds	r3, #2
 8005d80:	623b      	str	r3, [r7, #32]
      switch (blue_evt->ecode)
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f240 4207 	movw	r2, #1031	; 0x407
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d031      	beq.n	8005df4 <SVCCTL_App_Notification+0x134>
 8005d90:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8005d94:	da09      	bge.n	8005daa <SVCCTL_App_Notification+0xea>
 8005d96:	f240 4201 	movw	r2, #1025	; 0x401
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d026      	beq.n	8005dec <SVCCTL_App_Notification+0x12c>
 8005d9e:	f240 4202 	movw	r2, #1026	; 0x402
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00d      	beq.n	8005dc2 <SVCCTL_App_Notification+0x102>
 8005da6:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 8005da8:	e029      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
      switch (blue_evt->ecode)
 8005daa:	f240 420a 	movw	r2, #1034	; 0x40a
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d022      	beq.n	8005df8 <SVCCTL_App_Notification+0x138>
 8005db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db6:	d021      	beq.n	8005dfc <SVCCTL_App_Notification+0x13c>
 8005db8:	f240 4209 	movw	r2, #1033	; 0x409
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <SVCCTL_App_Notification+0x110>
      break; /* EVT_VENDOR */
 8005dc0:	e01d      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc6:	4913      	ldr	r1, [pc, #76]	; (8005e14 <SVCCTL_App_Notification+0x154>)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fa31 	bl	8004230 <aci_gap_pass_key_resp>
        break;
 8005dce:	e016      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blue_evt->data;
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005ddc:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <SVCCTL_App_Notification+0x14c>)
 8005de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fb85 	bl	80044f4 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8005dea:	e008      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	3302      	adds	r3, #2
 8005df0:	617b      	str	r3, [r7, #20]
        break;
 8005df2:	e004      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8005df4:	bf00      	nop
 8005df6:	e002      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
          break;
 8005df8:	bf00      	nop
 8005dfa:	e000      	b.n	8005dfe <SVCCTL_App_Notification+0x13e>
      break;
 8005dfc:	bf00      	nop
      break; /* EVT_VENDOR */
 8005dfe:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8005e00:	2301      	movs	r3, #1
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3728      	adds	r7, #40	; 0x28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2000011c 	.word	0x2000011c
 8005e10:	20000358 	.word	0x20000358
 8005e14:	0001b207 	.word	0x0001b207

08005e18 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <Ble_Tl_Init+0x20>)
 8005e20:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <Ble_Tl_Init+0x24>)
 8005e24:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005e26:	463b      	mov	r3, r7
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4805      	ldr	r0, [pc, #20]	; (8005e40 <Ble_Tl_Init+0x28>)
 8005e2c:	f7ff f8ea 	bl	8005004 <hci_init>

  return;
 8005e30:	bf00      	nop
}
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200300d4 	.word	0x200300d4
 8005e3c:	0800615d 	.word	0x0800615d
 8005e40:	08006125 	.word	0x08006125

08005e44 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e46:	b091      	sub	sp, #68	; 0x44
 8005e48:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8005e4e:	f7fe fef7 	bl	8004c40 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8005e52:	f000 f8e7 	bl	8006024 <BleGetBdAddress>
 8005e56:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	2106      	movs	r1, #6
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f7fe fde5 	bl	8004a2c <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8005e62:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8005e66:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8005e68:	f7ff febc 	bl	8005be4 <LL_FLASH_GetUDN>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8005e70:	f107 0308 	add.w	r3, r7, #8
 8005e74:	461a      	mov	r2, r3
 8005e76:	2106      	movs	r1, #6
 8005e78:	202e      	movs	r0, #46	; 0x2e
 8005e7a:	f7fe fdd7 	bl	8004a2c <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8005e7e:	4a4c      	ldr	r2, [pc, #304]	; (8005fb0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8005e80:	2110      	movs	r1, #16
 8005e82:	2018      	movs	r0, #24
 8005e84:	f7fe fdd2 	bl	8004a2c <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005e88:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	2008      	movs	r0, #8
 8005e8e:	f7fe fdcd 	bl	8004a2c <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005e92:	2118      	movs	r1, #24
 8005e94:	2001      	movs	r0, #1
 8005e96:	f7fe fe32 	bl	8004afe <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8005e9a:	f7fe fb82 	bl	80045a2 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8005eb2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8005eb4:	f107 0216 	add.w	r2, r7, #22
 8005eb8:	7ff8      	ldrb	r0, [r7, #31]
 8005eba:	f107 0312 	add.w	r3, r7, #18
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	2206      	movs	r2, #6
 8005eca:	2100      	movs	r1, #0
 8005ecc:	f7fe fa07 	bl	80042de <aci_gap_init>
                CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005ed0:	8afc      	ldrh	r4, [r7, #22]
 8005ed2:	8abd      	ldrh	r5, [r7, #20]
 8005ed4:	69b8      	ldr	r0, [r7, #24]
 8005ed6:	f7fa f951 	bl	800017c <strlen>
 8005eda:	4603      	mov	r3, r0
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f7fe fd18 	bl	800491e <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8005eee:	8af8      	ldrh	r0, [r7, #22]
 8005ef0:	8a79      	ldrh	r1, [r7, #18]
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f7fe fd10 	bl	800491e <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005efe:	2202      	movs	r2, #2
 8005f00:	2102      	movs	r1, #2
 8005f02:	2000      	movs	r0, #0
 8005f04:	f7fe fec0 	bl	8004c88 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005f08:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005f0e:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe f89a 	bl	800404c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005f18:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8005f1e:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f26:	2208      	movs	r2, #8
 8005f28:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005f30:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005f36:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f38:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005f3a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005f3c:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f48:	e00b      	b.n	8005f62 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8005f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f4e:	4a1b      	ldr	r2, [pc, #108]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f50:	4413      	add	r3, r2
 8005f52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f56:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8005f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f66:	2b0f      	cmp	r3, #15
 8005f68:	d9ef      	bls.n	8005f4a <Ble_Hci_Gap_Gatt_Init+0x106>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8005f6a:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f6c:	789d      	ldrb	r5, [r3, #2]
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f70:	785e      	ldrb	r6, [r3, #1]
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f74:	7d5b      	ldrb	r3, [r3, #21]
 8005f76:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f78:	7d92      	ldrb	r2, [r2, #22]
 8005f7a:	4910      	ldr	r1, [pc, #64]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f7c:	7d09      	ldrb	r1, [r1, #20]
 8005f7e:	480f      	ldr	r0, [pc, #60]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f80:	6980      	ldr	r0, [r0, #24]
 8005f82:	2400      	movs	r4, #0
 8005f84:	9404      	str	r4, [sp, #16]
 8005f86:	9003      	str	r0, [sp, #12]
 8005f88:	9102      	str	r1, [sp, #8]
 8005f8a:	9201      	str	r2, [sp, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2201      	movs	r2, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	f7fe f8a3 	bl	80040e0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8005fa2:	f7fe fa83 	bl	80044ac <aci_gap_configure_whitelist>
   }
}
 8005fa6:	bf00      	nop
 8005fa8:	372c      	adds	r7, #44	; 0x2c
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	08006f94 	.word	0x08006f94
 8005fb4:	08006fa4 	.word	0x08006fa4
 8005fb8:	08006df4 	.word	0x08006df4
 8005fbc:	2000011c 	.word	0x2000011c
 8005fc0:	0001b207 	.word	0x0001b207

08005fc4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08c      	sub	sp, #48	; 0x30
 8005fc8:	af08      	add	r7, sp, #32
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005fce:	2342      	movs	r3, #66	; 0x42
 8005fd0:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <Adv_Request+0x58>)
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9306      	str	r3, [sp, #24]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9305      	str	r3, [sp, #20]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9302      	str	r3, [sp, #8]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	22a0      	movs	r2, #160	; 0xa0
 8005ffa:	2180      	movs	r1, #128	; 0x80
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f7fd ff47 	bl	8003e90 <aci_gap_set_discoverable>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8006006:	4906      	ldr	r1, [pc, #24]	; (8006020 <Adv_Request+0x5c>)
 8006008:	2011      	movs	r0, #17
 800600a:	f7fe f9f3 	bl	80043f4 <aci_gap_update_adv_data>
 800600e:	4603      	mov	r3, r0
 8006010:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8006012:	bf00      	nop
}
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2000011c 	.word	0x2000011c
 8006020:	20000010 	.word	0x20000010

08006024 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800602a:	f7ff fddb 	bl	8005be4 <LL_FLASH_GetUDN>
 800602e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d023      	beq.n	8006080 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006038:	f7ff fdec 	bl	8005c14 <LL_FLASH_GetSTCompanyID>
 800603c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800603e:	f7ff fddd 	bl	8005bfc <LL_FLASH_GetDeviceID>
 8006042:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <BleGetBdAddress+0x80>)
 800604a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <BleGetBdAddress+0x80>)
 8006054:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	b2da      	uxtb	r2, r3
 800605c:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <BleGetBdAddress+0x80>)
 800605e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <BleGetBdAddress+0x80>)
 8006066:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <BleGetBdAddress+0x80>)
 800606e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <BleGetBdAddress+0x80>)
 8006078:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <BleGetBdAddress+0x80>)
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e00b      	b.n	8006098 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8006080:	2000      	movs	r0, #0
 8006082:	f7ff fcd3 	bl	8005a2c <OTP_Read>
 8006086:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e001      	b.n	8006098 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <BleGetBdAddress+0x84>)
 8006096:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8006098:	697b      	ldr	r3, [r7, #20]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000244 	.word	0x20000244
 80060a8:	08006f8c 	.word	0x08006f8c

080060ac <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <Adv_Cancel+0x30>)
 80060b4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d00a      	beq.n	80060d2 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80060bc:	2300      	movs	r3, #0
 80060be:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80060c0:	f7fd fec2 	bl	8003e48 <aci_gap_set_non_discoverable>
 80060c4:	4603      	mov	r3, r0
 80060c6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <Adv_Cancel+0x30>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
}
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	2000011c 	.word	0x2000011c

080060e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80060e8:	2100      	movs	r1, #0
 80060ea:	2004      	movs	r0, #4
 80060ec:	f000 fcf4 	bl	8006ad8 <UTIL_SEQ_SetTask>
  return;
 80060f0:	bf00      	nop
}
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006100:	2001      	movs	r0, #1
 8006102:	f000 fd4f 	bl	8006ba4 <UTIL_SEQ_SetEvt>
  return;
 8006106:	bf00      	nop
}
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006116:	2001      	movs	r0, #1
 8006118:	f000 fd62 	bl	8006be0 <UTIL_SEQ_WaitEvt>
  return;
 800611c:	bf00      	nop
}
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	3308      	adds	r3, #8
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fee4 	bl	8004f04 <SVCCTL_UserEvtRx>
 800613c:	4603      	mov	r3, r0
 800613e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800614c:	e002      	b.n	8006154 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <BLE_StatusNot+0x16>
 800616c:	2b01      	cmp	r3, #1
 800616e:	d006      	beq.n	800617e <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8006170:	e00b      	b.n	800618a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006172:	2307      	movs	r3, #7
 8006174:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fcd8 	bl	8006b2c <UTIL_SEQ_PauseTask>
      break;
 800617c:	e005      	b.n	800618a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800617e:	2307      	movs	r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fcf0 	bl	8006b68 <UTIL_SEQ_ResumeTask>
      break;
 8006188:	bf00      	nop
  }
  return;
 800618a:	bf00      	nop
}
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <Custom_APP_Notification>:
/* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

/* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <Custom_APP_Notification+0x16>
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d002      	beq.n	80061ac <Custom_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN CUSTOM_APP_Notification_default */

/* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80061a6:	e002      	b.n	80061ae <Custom_APP_Notification+0x1c>
    break;
 80061a8:	bf00      	nop
 80061aa:	e000      	b.n	80061ae <Custom_APP_Notification+0x1c>
    break;
 80061ac:	bf00      	nop

/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

/* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80061ae:	bf00      	nop
}
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80061ba:	b480      	push	{r7}
 80061bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN CUSTOM_APP_Init */

/* USER CODE END CUSTOM_APP_Init */
  return;
 80061be:	bf00      	nop
}
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
/* USER CODE BEGIN Custom_STM_Event_Handler_1 */

/* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75fb      	strb	r3, [r7, #23]
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3301      	adds	r3, #1
 80061d8:	613b      	str	r3, [r7, #16]

  switch(event_pckt->evt)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2bff      	cmp	r3, #255	; 0xff
 80061e0:	d000      	beq.n	80061e4 <Custom_STM_Event_Handler+0x1c>
    /* USER CODE BEGIN EVENT_PCKT_CASES*/

    /* USER CODE END EVENT_PCKT_CASES*/

    default:
      break;
 80061e2:	e018      	b.n	8006216 <Custom_STM_Event_Handler+0x4e>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3302      	adds	r3, #2
 80061e8:	60fb      	str	r3, [r7, #12]
      switch(blue_evt->ecode)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f640 4213 	movw	r2, #3091	; 0xc13
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d008      	beq.n	800620a <Custom_STM_Event_Handler+0x42>
 80061f8:	f640 4214 	movw	r2, #3092	; 0xc14
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d006      	beq.n	800620e <Custom_STM_Event_Handler+0x46>
 8006200:	f640 4201 	movw	r2, #3073	; 0xc01
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <Custom_STM_Event_Handler+0x4a>
          break;
 8006208:	e004      	b.n	8006214 <Custom_STM_Event_Handler+0x4c>
          break;
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <Custom_STM_Event_Handler+0x4c>
          break;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <Custom_STM_Event_Handler+0x4c>
          break;
 8006212:	bf00      	nop
      break; /* EVT_VENDOR */
 8006214:	bf00      	nop

/* USER CODE BEGIN Custom_STM_Event_Handler_2 */

/* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}/* end Custom_STM_Event_Handler */
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af06      	add	r7, sp, #24
/* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800622a:	4867      	ldr	r0, [pc, #412]	; (80063c8 <SVCCTL_InitCustomSvc+0x1a4>)
 800622c:	f7fe fe50 	bl	8004ed0 <SVCCTL_RegisterSvcHandler>
     *                                2 for Service2_Characte2 +
     *                                2 for Service2_Characte3 +
     *                              = 7
     */

    COPY_WSERVICE_1_UUID(uuid.Char_UUID_128);
 8006230:	238f      	movs	r3, #143	; 0x8f
 8006232:	703b      	strb	r3, [r7, #0]
 8006234:	23e5      	movs	r3, #229	; 0xe5
 8006236:	707b      	strb	r3, [r7, #1]
 8006238:	23b3      	movs	r3, #179	; 0xb3
 800623a:	70bb      	strb	r3, [r7, #2]
 800623c:	23d5      	movs	r3, #213	; 0xd5
 800623e:	70fb      	strb	r3, [r7, #3]
 8006240:	232e      	movs	r3, #46	; 0x2e
 8006242:	713b      	strb	r3, [r7, #4]
 8006244:	237f      	movs	r3, #127	; 0x7f
 8006246:	717b      	strb	r3, [r7, #5]
 8006248:	234a      	movs	r3, #74	; 0x4a
 800624a:	71bb      	strb	r3, [r7, #6]
 800624c:	2398      	movs	r3, #152	; 0x98
 800624e:	71fb      	strb	r3, [r7, #7]
 8006250:	232a      	movs	r3, #42	; 0x2a
 8006252:	723b      	strb	r3, [r7, #8]
 8006254:	2348      	movs	r3, #72	; 0x48
 8006256:	727b      	strb	r3, [r7, #9]
 8006258:	237a      	movs	r3, #122	; 0x7a
 800625a:	72bb      	strb	r3, [r7, #10]
 800625c:	23cc      	movs	r3, #204	; 0xcc
 800625e:	72fb      	strb	r3, [r7, #11]
 8006260:	2300      	movs	r3, #0
 8006262:	733b      	strb	r3, [r7, #12]
 8006264:	2302      	movs	r3, #2
 8006266:	737b      	strb	r3, [r7, #13]
 8006268:	2300      	movs	r3, #0
 800626a:	73bb      	strb	r3, [r7, #14]
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006270:	4639      	mov	r1, r7
 8006272:	4b56      	ldr	r3, [pc, #344]	; (80063cc <SVCCTL_InitCustomSvc+0x1a8>)
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	2307      	movs	r3, #7
 8006278:	2201      	movs	r2, #1
 800627a:	2002      	movs	r0, #2
 800627c:	f7fe f9b6 	bl	80045ec <aci_gatt_add_service>
                      &(CustomContext.CustomWserv1Hdle));

    /**
     *  Service2_Characte1
     */
    COPY_SERVICE2_CHARACTE1_UUID(uuid.Char_UUID_128);
 8006280:	2319      	movs	r3, #25
 8006282:	703b      	strb	r3, [r7, #0]
 8006284:	23ed      	movs	r3, #237	; 0xed
 8006286:	707b      	strb	r3, [r7, #1]
 8006288:	2382      	movs	r3, #130	; 0x82
 800628a:	70bb      	strb	r3, [r7, #2]
 800628c:	23ae      	movs	r3, #174	; 0xae
 800628e:	70fb      	strb	r3, [r7, #3]
 8006290:	23ed      	movs	r3, #237	; 0xed
 8006292:	713b      	strb	r3, [r7, #4]
 8006294:	2321      	movs	r3, #33	; 0x21
 8006296:	717b      	strb	r3, [r7, #5]
 8006298:	234c      	movs	r3, #76	; 0x4c
 800629a:	71bb      	strb	r3, [r7, #6]
 800629c:	239d      	movs	r3, #157	; 0x9d
 800629e:	71fb      	strb	r3, [r7, #7]
 80062a0:	2341      	movs	r3, #65	; 0x41
 80062a2:	723b      	strb	r3, [r7, #8]
 80062a4:	2345      	movs	r3, #69	; 0x45
 80062a6:	727b      	strb	r3, [r7, #9]
 80062a8:	2322      	movs	r3, #34	; 0x22
 80062aa:	72bb      	strb	r3, [r7, #10]
 80062ac:	238e      	movs	r3, #142	; 0x8e
 80062ae:	72fb      	strb	r3, [r7, #11]
 80062b0:	2301      	movs	r3, #1
 80062b2:	733b      	strb	r3, [r7, #12]
 80062b4:	2302      	movs	r3, #2
 80062b6:	737b      	strb	r3, [r7, #13]
 80062b8:	2300      	movs	r3, #0
 80062ba:	73bb      	strb	r3, [r7, #14]
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(CustomContext.CustomWserv1Hdle,
 80062c0:	4b42      	ldr	r3, [pc, #264]	; (80063cc <SVCCTL_InitCustomSvc+0x1a8>)
 80062c2:	8818      	ldrh	r0, [r3, #0]
 80062c4:	2305      	movs	r3, #5
 80062c6:	b299      	uxth	r1, r3
 80062c8:	463a      	mov	r2, r7
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <SVCCTL_InitCustomSvc+0x1ac>)
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	2300      	movs	r3, #0
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	2310      	movs	r3, #16
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	2301      	movs	r3, #1
 80062d8:	9302      	str	r3, [sp, #8]
 80062da:	2300      	movs	r3, #0
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	2306      	movs	r3, #6
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	460b      	mov	r3, r1
 80062e4:	2102      	movs	r1, #2
 80062e6:	f7fe fa30 	bl	800474a <aci_gatt_add_char>
                      CHAR_VALUE_LEN_CONSTANT,
                      &(CustomContext.CustomServ2_Char1Hdle));
    /**
     *  Service2_Characte2
     */
    COPY_SERVICE2_CHARACTE2_UUID(uuid.Char_UUID_128);
 80062ea:	2319      	movs	r3, #25
 80062ec:	703b      	strb	r3, [r7, #0]
 80062ee:	23ed      	movs	r3, #237	; 0xed
 80062f0:	707b      	strb	r3, [r7, #1]
 80062f2:	2382      	movs	r3, #130	; 0x82
 80062f4:	70bb      	strb	r3, [r7, #2]
 80062f6:	23ae      	movs	r3, #174	; 0xae
 80062f8:	70fb      	strb	r3, [r7, #3]
 80062fa:	23ed      	movs	r3, #237	; 0xed
 80062fc:	713b      	strb	r3, [r7, #4]
 80062fe:	2321      	movs	r3, #33	; 0x21
 8006300:	717b      	strb	r3, [r7, #5]
 8006302:	234c      	movs	r3, #76	; 0x4c
 8006304:	71bb      	strb	r3, [r7, #6]
 8006306:	239d      	movs	r3, #157	; 0x9d
 8006308:	71fb      	strb	r3, [r7, #7]
 800630a:	2341      	movs	r3, #65	; 0x41
 800630c:	723b      	strb	r3, [r7, #8]
 800630e:	2345      	movs	r3, #69	; 0x45
 8006310:	727b      	strb	r3, [r7, #9]
 8006312:	2322      	movs	r3, #34	; 0x22
 8006314:	72bb      	strb	r3, [r7, #10]
 8006316:	238e      	movs	r3, #142	; 0x8e
 8006318:	72fb      	strb	r3, [r7, #11]
 800631a:	2302      	movs	r3, #2
 800631c:	733b      	strb	r3, [r7, #12]
 800631e:	2302      	movs	r3, #2
 8006320:	737b      	strb	r3, [r7, #13]
 8006322:	2300      	movs	r3, #0
 8006324:	73bb      	strb	r3, [r7, #14]
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(CustomContext.CustomWserv1Hdle,
 800632a:	4b28      	ldr	r3, [pc, #160]	; (80063cc <SVCCTL_InitCustomSvc+0x1a8>)
 800632c:	8818      	ldrh	r0, [r3, #0]
 800632e:	2305      	movs	r3, #5
 8006330:	b299      	uxth	r1, r3
 8006332:	463a      	mov	r2, r7
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <SVCCTL_InitCustomSvc+0x1b0>)
 8006336:	9305      	str	r3, [sp, #20]
 8006338:	2300      	movs	r3, #0
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	2310      	movs	r3, #16
 800633e:	9303      	str	r3, [sp, #12]
 8006340:	2301      	movs	r3, #1
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	2300      	movs	r3, #0
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	2306      	movs	r3, #6
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	460b      	mov	r3, r1
 800634e:	2102      	movs	r1, #2
 8006350:	f7fe f9fb 	bl	800474a <aci_gatt_add_char>
                      CHAR_VALUE_LEN_CONSTANT,
                      &(CustomContext.CustomServ2_Char2Hdle));
    /**
     *  Service2_Characte3
     */
    COPY_SERVICE2_CHARACTE3_UUID(uuid.Char_UUID_128);
 8006354:	2319      	movs	r3, #25
 8006356:	703b      	strb	r3, [r7, #0]
 8006358:	23ed      	movs	r3, #237	; 0xed
 800635a:	707b      	strb	r3, [r7, #1]
 800635c:	2382      	movs	r3, #130	; 0x82
 800635e:	70bb      	strb	r3, [r7, #2]
 8006360:	23ae      	movs	r3, #174	; 0xae
 8006362:	70fb      	strb	r3, [r7, #3]
 8006364:	23ed      	movs	r3, #237	; 0xed
 8006366:	713b      	strb	r3, [r7, #4]
 8006368:	2321      	movs	r3, #33	; 0x21
 800636a:	717b      	strb	r3, [r7, #5]
 800636c:	234c      	movs	r3, #76	; 0x4c
 800636e:	71bb      	strb	r3, [r7, #6]
 8006370:	239d      	movs	r3, #157	; 0x9d
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	2341      	movs	r3, #65	; 0x41
 8006376:	723b      	strb	r3, [r7, #8]
 8006378:	2345      	movs	r3, #69	; 0x45
 800637a:	727b      	strb	r3, [r7, #9]
 800637c:	2322      	movs	r3, #34	; 0x22
 800637e:	72bb      	strb	r3, [r7, #10]
 8006380:	238e      	movs	r3, #142	; 0x8e
 8006382:	72fb      	strb	r3, [r7, #11]
 8006384:	2303      	movs	r3, #3
 8006386:	733b      	strb	r3, [r7, #12]
 8006388:	2302      	movs	r3, #2
 800638a:	737b      	strb	r3, [r7, #13]
 800638c:	2300      	movs	r3, #0
 800638e:	73bb      	strb	r3, [r7, #14]
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(CustomContext.CustomWserv1Hdle,
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <SVCCTL_InitCustomSvc+0x1a8>)
 8006396:	8818      	ldrh	r0, [r3, #0]
 8006398:	2305      	movs	r3, #5
 800639a:	b299      	uxth	r1, r3
 800639c:	463a      	mov	r2, r7
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <SVCCTL_InitCustomSvc+0x1b4>)
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	2300      	movs	r3, #0
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	2310      	movs	r3, #16
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	2301      	movs	r3, #1
 80063ac:	9302      	str	r3, [sp, #8]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	2306      	movs	r3, #6
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	460b      	mov	r3, r1
 80063b8:	2102      	movs	r1, #2
 80063ba:	f7fe f9c6 	bl	800474a <aci_gatt_add_char>

/* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

/* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80063be:	bf00      	nop
}
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	080061c9 	.word	0x080061c9
 80063cc:	20000100 	.word	0x20000100
 80063d0:	20000102 	.word	0x20000102
 80063d4:	20000104 	.word	0x20000104
 80063d8:	20000106 	.word	0x20000106

080063dc <LL_PWR_EnableBootC2>:
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <LL_PWR_EnableBootC2+0x1c>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <LL_PWR_EnableBootC2+0x1c>)
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	60d3      	str	r3, [r2, #12]
}
 80063ec:	bf00      	nop
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	58000400 	.word	0x58000400

080063fc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006406:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800640a:	4905      	ldr	r1, [pc, #20]	; (8006420 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	58000800 	.word	0x58000800

08006424 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	4904      	ldr	r1, [pc, #16]	; (8006444 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4313      	orrs	r3, r2
 8006436:	620b      	str	r3, [r1, #32]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	58000800 	.word	0x58000800

08006448 <LL_AHB3_GRP1_EnableClock>:
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4313      	orrs	r3, r2
 800645e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_C1_IPCC_EnableIT_TXF>:
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <LL_C1_IPCC_EnableIT_RXO>:
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_C1_IPCC_EnableTransmitChannel>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	43db      	mvns	r3, r3
 80064ce:	401a      	ands	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	605a      	str	r2, [r3, #4]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	43db      	mvns	r3, r3
 8006516:	401a      	ands	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	605a      	str	r2, [r3, #4]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	041a      	lsls	r2, r3, #16
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	4013      	ands	r3, r2
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d101      	bne.n	800657e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	4013      	ands	r3, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d101      	bne.n	80065a8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80065bc:	2102      	movs	r1, #2
 80065be:	4819      	ldr	r0, [pc, #100]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 80065c0:	f7ff ffe4 	bl	800658c <LL_C2_IPCC_IsActiveFlag_CHx>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HW_IPCC_Rx_Handler+0x26>
 80065ca:	4b16      	ldr	r3, [pc, #88]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	43db      	mvns	r3, r3
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80065d8:	f000 f8e6 	bl	80067a8 <HW_IPCC_SYS_EvtHandler>
 80065dc:	e01f      	b.n	800661e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80065de:	2101      	movs	r1, #1
 80065e0:	4810      	ldr	r0, [pc, #64]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 80065e2:	f7ff ffd3 	bl	800658c <LL_C2_IPCC_IsActiveFlag_CHx>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HW_IPCC_Rx_Handler+0x46>
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80065f8:	f000 f89a 	bl	8006730 <HW_IPCC_BLE_EvtHandler>
 80065fc:	e00f      	b.n	800661e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80065fe:	2108      	movs	r1, #8
 8006600:	4808      	ldr	r0, [pc, #32]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 8006602:	f7ff ffc3 	bl	800658c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HW_IPCC_Rx_Handler+0x68>
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <HW_IPCC_Rx_Handler+0x6c>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	43db      	mvns	r3, r3
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800661a:	f000 f911 	bl	8006840 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800661e:	bf00      	nop
 8006620:	bf00      	nop
}
 8006622:	bd80      	pop	{r7, pc}
 8006624:	58000c00 	.word	0x58000c00

08006628 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800662c:	2102      	movs	r1, #2
 800662e:	4822      	ldr	r0, [pc, #136]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 8006630:	f7ff ff97 	bl	8006562 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HW_IPCC_Tx_Handler+0x26>
 800663a:	4b1f      	ldr	r3, [pc, #124]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	43db      	mvns	r3, r3
 8006640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006648:	f000 f8a2 	bl	8006790 <HW_IPCC_SYS_CmdEvtHandler>
 800664c:	e031      	b.n	80066b2 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800664e:	2102      	movs	r1, #2
 8006650:	4819      	ldr	r0, [pc, #100]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 8006652:	f7ff ff86 	bl	8006562 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HW_IPCC_Tx_Handler+0x48>
 800665c:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	43db      	mvns	r3, r3
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800666a:	f000 f891 	bl	8006790 <HW_IPCC_SYS_CmdEvtHandler>
 800666e:	e020      	b.n	80066b2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006670:	2108      	movs	r1, #8
 8006672:	4811      	ldr	r0, [pc, #68]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 8006674:	f7ff ff75 	bl	8006562 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HW_IPCC_Tx_Handler+0x6a>
 800667e:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	43db      	mvns	r3, r3
 8006684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800668c:	f000 f8ba 	bl	8006804 <HW_IPCC_MM_FreeBufHandler>
 8006690:	e00f      	b.n	80066b2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006692:	2120      	movs	r1, #32
 8006694:	4808      	ldr	r0, [pc, #32]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 8006696:	f7ff ff64 	bl	8006562 <LL_C1_IPCC_IsActiveFlag_CHx>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HW_IPCC_Tx_Handler+0x8c>
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HW_IPCC_Tx_Handler+0x90>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	43db      	mvns	r3, r3
 80066a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80066ae:	f000 f84b 	bl	8006748 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
}
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	58000c00 	.word	0x58000c00

080066bc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80066c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80066c4:	f7ff fe9a 	bl	80063fc <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80066c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80066cc:	f7ff feaa 	bl	8006424 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80066d0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80066d2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80066d4:	f7ff fe82 	bl	80063dc <LL_PWR_EnableBootC2>

  return;
 80066d8:	bf00      	nop
}
 80066da:	bd80      	pop	{r7, pc}

080066dc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80066e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80066e4:	f7ff feb0 	bl	8006448 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80066e8:	4806      	ldr	r0, [pc, #24]	; (8006704 <HW_IPCC_Init+0x28>)
 80066ea:	f7ff fed6 	bl	800649a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80066ee:	4805      	ldr	r0, [pc, #20]	; (8006704 <HW_IPCC_Init+0x28>)
 80066f0:	f7ff fec3 	bl	800647a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80066f4:	202c      	movs	r0, #44	; 0x2c
 80066f6:	f7fb fb38 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80066fa:	202d      	movs	r0, #45	; 0x2d
 80066fc:	f7fb fb35 	bl	8001d6a <HAL_NVIC_EnableIRQ>

  return;
 8006700:	bf00      	nop
}
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58000c00 	.word	0x58000c00

08006708 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800670c:	2101      	movs	r1, #1
 800670e:	4802      	ldr	r0, [pc, #8]	; (8006718 <HW_IPCC_BLE_Init+0x10>)
 8006710:	f7ff fef8 	bl	8006504 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006714:	bf00      	nop
}
 8006716:	bd80      	pop	{r7, pc}
 8006718:	58000c00 	.word	0x58000c00

0800671c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006720:	2101      	movs	r1, #1
 8006722:	4802      	ldr	r0, [pc, #8]	; (800672c <HW_IPCC_BLE_SendCmd+0x10>)
 8006724:	f7ff ff0e 	bl	8006544 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006728:	bf00      	nop
}
 800672a:	bd80      	pop	{r7, pc}
 800672c:	58000c00 	.word	0x58000c00

08006730 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006734:	f7ff f82a 	bl	800578c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006738:	2101      	movs	r1, #1
 800673a:	4802      	ldr	r0, [pc, #8]	; (8006744 <HW_IPCC_BLE_EvtHandler+0x14>)
 800673c:	f7ff fef4 	bl	8006528 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006740:	bf00      	nop
}
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58000c00 	.word	0x58000c00

08006748 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800674c:	2120      	movs	r1, #32
 800674e:	4803      	ldr	r0, [pc, #12]	; (800675c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006750:	f7ff fec6 	bl	80064e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006754:	f7ff f836 	bl	80057c4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006758:	bf00      	nop
}
 800675a:	bd80      	pop	{r7, pc}
 800675c:	58000c00 	.word	0x58000c00

08006760 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006764:	2102      	movs	r1, #2
 8006766:	4802      	ldr	r0, [pc, #8]	; (8006770 <HW_IPCC_SYS_Init+0x10>)
 8006768:	f7ff fecc 	bl	8006504 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800676c:	bf00      	nop
}
 800676e:	bd80      	pop	{r7, pc}
 8006770:	58000c00 	.word	0x58000c00

08006774 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006778:	2102      	movs	r1, #2
 800677a:	4804      	ldr	r0, [pc, #16]	; (800678c <HW_IPCC_SYS_SendCmd+0x18>)
 800677c:	f7ff fee2 	bl	8006544 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006780:	2102      	movs	r1, #2
 8006782:	4802      	ldr	r0, [pc, #8]	; (800678c <HW_IPCC_SYS_SendCmd+0x18>)
 8006784:	f7ff fe99 	bl	80064ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006788:	bf00      	nop
}
 800678a:	bd80      	pop	{r7, pc}
 800678c:	58000c00 	.word	0x58000c00

08006790 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006794:	2102      	movs	r1, #2
 8006796:	4803      	ldr	r0, [pc, #12]	; (80067a4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006798:	f7ff fea2 	bl	80064e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800679c:	f7ff f85a 	bl	8005854 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80067a0:	bf00      	nop
}
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58000c00 	.word	0x58000c00

080067a8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80067ac:	f7ff f862 	bl	8005874 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80067b0:	2102      	movs	r1, #2
 80067b2:	4802      	ldr	r0, [pc, #8]	; (80067bc <HW_IPCC_SYS_EvtHandler+0x14>)
 80067b4:	f7ff feb8 	bl	8006528 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80067b8:	bf00      	nop
}
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	58000c00 	.word	0x58000c00

080067c0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80067c8:	2108      	movs	r1, #8
 80067ca:	480c      	ldr	r0, [pc, #48]	; (80067fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80067cc:	f7ff fec9 	bl	8006562 <LL_C1_IPCC_IsActiveFlag_CHx>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80067dc:	2108      	movs	r1, #8
 80067de:	4807      	ldr	r0, [pc, #28]	; (80067fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80067e0:	f7ff fe6b 	bl	80064ba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80067e4:	e006      	b.n	80067f4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80067ea:	2108      	movs	r1, #8
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80067ee:	f7ff fea9 	bl	8006544 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80067f2:	bf00      	nop
}
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	58000c00 	.word	0x58000c00
 8006800:	2000024c 	.word	0x2000024c

08006804 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006808:	2108      	movs	r1, #8
 800680a:	4806      	ldr	r0, [pc, #24]	; (8006824 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800680c:	f7ff fe68 	bl	80064e0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006816:	2108      	movs	r1, #8
 8006818:	4802      	ldr	r0, [pc, #8]	; (8006824 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800681a:	f7ff fe93 	bl	8006544 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800681e:	bf00      	nop
}
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	58000c00 	.word	0x58000c00
 8006828:	2000024c 	.word	0x2000024c

0800682c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006830:	2108      	movs	r1, #8
 8006832:	4802      	ldr	r0, [pc, #8]	; (800683c <HW_IPCC_TRACES_Init+0x10>)
 8006834:	f7ff fe66 	bl	8006504 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006838:	bf00      	nop
}
 800683a:	bd80      	pop	{r7, pc}
 800683c:	58000c00 	.word	0x58000c00

08006840 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006844:	f7ff f8ce 	bl	80059e4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006848:	2108      	movs	r1, #8
 800684a:	4802      	ldr	r0, [pc, #8]	; (8006854 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800684c:	f7ff fe6c 	bl	8006528 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006850:	bf00      	nop
}
 8006852:	bd80      	pop	{r7, pc}
 8006854:	58000c00 	.word	0x58000c00

08006858 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <UTIL_LPM_Init+0x1c>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <UTIL_LPM_Init+0x20>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006868:	bf00      	nop
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000250 	.word	0x20000250
 8006878:	20000254 	.word	0x20000254

0800687c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006888:	f3ef 8310 	mrs	r3, PRIMASK
 800688c:	613b      	str	r3, [r7, #16]
  return(result);
 800688e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006892:	b672      	cpsid	i
  
  switch(state)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <UTIL_LPM_SetOffMode+0x32>
 800689a:	2b01      	cmp	r3, #1
 800689c:	d000      	beq.n	80068a0 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800689e:	e00e      	b.n	80068be <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <UTIL_LPM_SetOffMode+0x58>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <UTIL_LPM_SetOffMode+0x58>)
 80068aa:	6013      	str	r3, [r2, #0]
      break;
 80068ac:	e007      	b.n	80068be <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	43da      	mvns	r2, r3
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <UTIL_LPM_SetOffMode+0x58>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4013      	ands	r3, r2
 80068b8:	4a06      	ldr	r2, [pc, #24]	; (80068d4 <UTIL_LPM_SetOffMode+0x58>)
 80068ba:	6013      	str	r3, [r2, #0]
      break;
 80068bc:	bf00      	nop
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20000254 	.word	0x20000254

080068d8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80068e0:	4b65      	ldr	r3, [pc, #404]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80068e6:	4b64      	ldr	r3, [pc, #400]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4013      	ands	r3, r2
 80068ee:	4a62      	ldr	r2, [pc, #392]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 80068f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80068f2:	e081      	b.n	80069f8 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80068f8:	e002      	b.n	8006900 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	3301      	adds	r3, #1
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006900:	4a5e      	ldr	r2, [pc, #376]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006908:	4b5d      	ldr	r3, [pc, #372]	; (8006a80 <UTIL_SEQ_Run+0x1a8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	401a      	ands	r2, r3
 800690e:	4b5a      	ldr	r3, [pc, #360]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8006918:	4a58      	ldr	r2, [pc, #352]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006920:	4b57      	ldr	r3, [pc, #348]	; (8006a80 <UTIL_SEQ_Run+0x1a8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	401a      	ands	r2, r3
 8006926:	4b54      	ldr	r3, [pc, #336]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4013      	ands	r3, r2
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800692e:	4a53      	ldr	r2, [pc, #332]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006940:	4a4e      	ldr	r2, [pc, #312]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4413      	add	r3, r2
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800694e:	4a4b      	ldr	r2, [pc, #300]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	4013      	ands	r3, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f000 f98f 	bl	8006c80 <SEQ_BitPosition>
 8006962:	4603      	mov	r3, r0
 8006964:	461a      	mov	r2, r3
 8006966:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 8006968:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800696a:	4a44      	ldr	r2, [pc, #272]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4413      	add	r3, r2
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	43db      	mvns	r3, r3
 8006980:	401a      	ands	r2, r3
 8006982:	493e      	ldr	r1, [pc, #248]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	440b      	add	r3, r1
 800698a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698c:	f3ef 8310 	mrs	r3, PRIMASK
 8006990:	61bb      	str	r3, [r7, #24]
  return(result);
 8006992:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006996:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006998:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43da      	mvns	r2, r3
 80069a4:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <UTIL_SEQ_Run+0x1b0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4013      	ands	r3, r2
 80069aa:	4a37      	ldr	r2, [pc, #220]	; (8006a88 <UTIL_SEQ_Run+0x1b0>)
 80069ac:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80069ae:	2302      	movs	r3, #2
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b2:	e013      	b.n	80069dc <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 80069ba:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80069be:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2201      	movs	r2, #1
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43da      	mvns	r2, r3
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	3b01      	subs	r3, #1
 80069ce:	400a      	ands	r2, r1
 80069d0:	492a      	ldr	r1, [pc, #168]	; (8006a7c <UTIL_SEQ_Run+0x1a4>)
 80069d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	3b01      	subs	r3, #1
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e8      	bne.n	80069b4 <UTIL_SEQ_Run+0xdc>
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <UTIL_SEQ_Run+0x1b4>)
 80069f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80069f8:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <UTIL_SEQ_Run+0x1b0>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <UTIL_SEQ_Run+0x1a8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	401a      	ands	r2, r3
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <UTIL_SEQ_Run+0x144>
 8006a0c:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <UTIL_SEQ_Run+0x1b8>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <UTIL_SEQ_Run+0x1bc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f af6c 	beq.w	80068f4 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <UTIL_SEQ_Run+0x1ac>)
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006a24:	f000 f91e 	bl	8006c64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a28:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006a2e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a32:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8006a34:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <UTIL_SEQ_Run+0x1b0>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <UTIL_SEQ_Run+0x1a8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	401a      	ands	r2, r3
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d108      	bne.n	8006a5a <UTIL_SEQ_Run+0x182>
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <UTIL_SEQ_Run+0x1b8>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <UTIL_SEQ_Run+0x1bc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8006a56:	f7f9 fc4c 	bl	80002f2 <UTIL_SEQ_Idle>
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8006a64:	f000 f905 	bl	8006c72 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006a68:	4a03      	ldr	r2, [pc, #12]	; (8006a78 <UTIL_SEQ_Run+0x1a0>)
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	6013      	str	r3, [r2, #0]

  return;
 8006a6e:	bf00      	nop
}
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000028 	.word	0x20000028
 8006a7c:	200002e8 	.word	0x200002e8
 8006a80:	20000024 	.word	0x20000024
 8006a84:	20000264 	.word	0x20000264
 8006a88:	20000258 	.word	0x20000258
 8006a8c:	20000268 	.word	0x20000268
 8006a90:	2000025c 	.word	0x2000025c
 8006a94:	20000260 	.word	0x20000260

08006a98 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aae:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f8e5 	bl	8006c80 <SEQ_BitPosition>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <UTIL_SEQ_RegTask+0x3c>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006acc:	bf00      	nop
}
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000268 	.word	0x20000268

08006ad8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aec:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <UTIL_SEQ_SetTask+0x4c>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	4a0b      	ldr	r2, [pc, #44]	; (8006b24 <UTIL_SEQ_SetTask+0x4c>)
 8006af8:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006afa:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <UTIL_SEQ_SetTask+0x50>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	4908      	ldr	r1, [pc, #32]	; (8006b28 <UTIL_SEQ_SetTask+0x50>)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b18:	bf00      	nop
}
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	20000258 	.word	0x20000258
 8006b28:	200002e8 	.word	0x200002e8

08006b2c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b34:	f3ef 8310 	mrs	r3, PRIMASK
 8006b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b3e:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	43da      	mvns	r2, r3
 8006b44:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <UTIL_SEQ_PauseTask+0x38>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	4a06      	ldr	r2, [pc, #24]	; (8006b64 <UTIL_SEQ_PauseTask+0x38>)
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b58:	bf00      	nop
}
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000024 	.word	0x20000024

08006b68 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b70:	f3ef 8310 	mrs	r3, PRIMASK
 8006b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b76:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006b78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b7a:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <UTIL_SEQ_ResumeTask+0x38>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <UTIL_SEQ_ResumeTask+0x38>)
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b92:	bf00      	nop
}
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000024 	.word	0x20000024

08006ba4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bac:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006bb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bb6:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <UTIL_SEQ_SetEvt+0x38>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	4a06      	ldr	r2, [pc, #24]	; (8006bdc <UTIL_SEQ_SetEvt+0x38>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006bce:	bf00      	nop
}
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	2000025c 	.word	0x2000025c

08006be0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <UTIL_SEQ_WaitEvt+0x78>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006bee:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <UTIL_SEQ_WaitEvt+0x78>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d102      	bne.n	8006bfe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e005      	b.n	8006c0a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8006bfe:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <UTIL_SEQ_WaitEvt+0x78>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2201      	movs	r2, #1
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8006c10:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8006c16:	e005      	b.n	8006c24 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006c18:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f7f9 fb6e 	bl	8000300 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <UTIL_SEQ_WaitEvt+0x80>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f2      	beq.n	8006c18 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <UTIL_SEQ_WaitEvt+0x78>)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	43da      	mvns	r2, r3
 8006c3e:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <UTIL_SEQ_WaitEvt+0x80>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4013      	ands	r3, r2
 8006c44:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <UTIL_SEQ_WaitEvt+0x80>)
 8006c46:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8006c48:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <UTIL_SEQ_WaitEvt+0x7c>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6013      	str	r3, [r2, #0]

  return;
 8006c4e:	bf00      	nop
}
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000264 	.word	0x20000264
 8006c5c:	20000260 	.word	0x20000260
 8006c60:	2000025c 	.word	0x2000025c

08006c64 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006c68:	bf00      	nop
}
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006c76:	bf00      	nop
}
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <SEQ_BitPosition+0x20>
 8006c96:	2310      	movs	r3, #16
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <SEQ_BitPosition+0x36>
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	3308      	adds	r3, #8
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <SEQ_BitPosition+0x4c>
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	73fb      	strb	r3, [r7, #15]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0f1b      	lsrs	r3, r3, #28
 8006cd0:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <SEQ_BitPosition+0x70>)
 8006cd2:	5cd2      	ldrb	r2, [r2, r3]
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	f1c3 031f 	rsb	r3, r3, #31
 8006ce0:	b2db      	uxtb	r3, r3
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	08006fb4 	.word	0x08006fb4

08006cf4 <__libc_init_array>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4e0d      	ldr	r6, [pc, #52]	; (8006d2c <__libc_init_array+0x38>)
 8006cf8:	4c0d      	ldr	r4, [pc, #52]	; (8006d30 <__libc_init_array+0x3c>)
 8006cfa:	1ba4      	subs	r4, r4, r6
 8006cfc:	10a4      	asrs	r4, r4, #2
 8006cfe:	2500      	movs	r5, #0
 8006d00:	42a5      	cmp	r5, r4
 8006d02:	d109      	bne.n	8006d18 <__libc_init_array+0x24>
 8006d04:	4e0b      	ldr	r6, [pc, #44]	; (8006d34 <__libc_init_array+0x40>)
 8006d06:	4c0c      	ldr	r4, [pc, #48]	; (8006d38 <__libc_init_array+0x44>)
 8006d08:	f000 f82c 	bl	8006d64 <_init>
 8006d0c:	1ba4      	subs	r4, r4, r6
 8006d0e:	10a4      	asrs	r4, r4, #2
 8006d10:	2500      	movs	r5, #0
 8006d12:	42a5      	cmp	r5, r4
 8006d14:	d105      	bne.n	8006d22 <__libc_init_array+0x2e>
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d1c:	4798      	blx	r3
 8006d1e:	3501      	adds	r5, #1
 8006d20:	e7ee      	b.n	8006d00 <__libc_init_array+0xc>
 8006d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d26:	4798      	blx	r3
 8006d28:	3501      	adds	r5, #1
 8006d2a:	e7f2      	b.n	8006d12 <__libc_init_array+0x1e>
 8006d2c:	08006fc4 	.word	0x08006fc4
 8006d30:	08006fc4 	.word	0x08006fc4
 8006d34:	08006fc4 	.word	0x08006fc4
 8006d38:	08006fc8 	.word	0x08006fc8

08006d3c <memcpy>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	1e43      	subs	r3, r0, #1
 8006d40:	440a      	add	r2, r1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	d100      	bne.n	8006d48 <memcpy+0xc>
 8006d46:	bd10      	pop	{r4, pc}
 8006d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d50:	e7f7      	b.n	8006d42 <memcpy+0x6>

08006d52 <memset>:
 8006d52:	4402      	add	r2, r0
 8006d54:	4603      	mov	r3, r0
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d100      	bne.n	8006d5c <memset+0xa>
 8006d5a:	4770      	bx	lr
 8006d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d60:	e7f9      	b.n	8006d56 <memset+0x4>
	...

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
